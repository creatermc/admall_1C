

// apt list --installed отобраджне всех установленных пакетов ubuntu 


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  на linux'e потребуется установить 
//  ssh
//  sshpass
//  dos2unix (не обязательно)
//  xvfb-run  Xvfb (X virtual framebuffer) — виртуальный X-сервер, который для вывода использует не видеокарту,
// а оперативную память
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Оформление  = УсловноеОформление.Элементы.Добавить();
	Оформление.Использование = Истина;
	//Для табличных частей указываем оформляемые поля
	//задаем оформляемые колонки (все)
	Для каждого элПоля Из Элементы.РезультатВыполненияТЧ.ПодчиненныеЭлементы Цикл
		ОформляемоеПоле = Оформление.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(элПоля.Имя);
	КонецЦикла;

	Отбор = Оформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РезультатВыполненияТЧ.Реквизит1");
	Отбор.ПравоеЗначение = "-";
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование = Истина;
	Оформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Аквамарин); //Новый Цвет(30, 174, 133));  

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформированныйСкрипт(Команда)
	
		Если ТунельSSH Тогда   
			Если 	Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ВыполнитьСформированныйСкриптПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформированныйСкриптПродолжение()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + ТекстСкриптаИзФормы + " ", ТекстСкриптаИзФормы);

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрямуюКоманду(Команда)
	
		Если ТунельSSH Тогда   
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ВыполнитьСформированныйТекстКоманды();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСформированныйТекстКоманды()

	ТекстПрямойКоманды = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + ТекстПрямойКоманды + " ", ТекстПрямойКоманды);

	ПолучениеДанныхССервераПослеОбработкиСкрипта(,,,, Истина);

	ТекстПрямойКоманды = "";

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////      1C      ////////////////////////////////////////////////////////////////////////////////////

// Удаление базы 1С
	//Если ВаринатВзаимодействия1С = "Удаление базы" Тогда
	//	Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
	//				Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
	//				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Тогда
	//			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	//			ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
	//		Возврат;
	//	КонецЕсли;

	//	Если Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С) = Неопределено Тогда
	//		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	//		ПоказатьПредупреждение(Оповещение, "Текущая база 1С " + Символ(34) + База1С + Символ(34) + " не обнаружена!", 0, "Внимание!");
	//		Возврат;
	//	КонецЕсли;

	//    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
	//     ПоказатьВопрос(Оповещение, "Вы уверны что хотиете безвозвратно удалить " +Символы.ПС + " базу 1С " + Символ(34) +
	//		 Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С).Представление  + Символ(34) + " ?",
	//        	РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Внимание!" );
	//КонецЕсли;


///////////////////////////////////////////////////////////////////////  Apache  ////////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ЗаписьТекстаСкриптаНаСервере(ТекстКомандыДляВыполнения, ФайлСкрипта)

Перем ЗаписьТекста;

ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
ЗаписьТекста.ЗаписатьСтроку("");
ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
ЗаписьТекста.ЗаписатьСтроку("");
ЗаписьТекста.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения(КодВозврата, ДополнительныйПараметр) Экспорт

	КодВозвратаРезультат = КодВозврата;
	ЗапускПриложенияОбработан = Истина;

		// Обработка результата выполнения	
		Если НЕ КодВозвратаРезультат = 0 Тогда
			РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  ТекстКомандыДляВыполнения +  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
				Возврат;
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьВременногоКаталога()
	ОбратныйВызов = Новый ОписаниеОповещения("ПолучитьКаталогВременныхФайловЗавершение", ЭтотОбъект, , "ФайловаяОшибка", ЭтотОбъект);
	НачатьПолучениеКаталогаВременныхФайлов(ОбратныйВызов);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКаталогВременныхФайловЗавершение(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	КаталогВременныхФайлов = ИмяКаталогаВременныхФайлов;
КонецПроцедуры

&НаКлиенте
Процедура ФайловаяОшибка (ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	РезультатВыполнения = "При выполнении файловой операции обнаружена ошибка: " + 
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМестоНаДискахUbuntu();

				ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
					ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияСвободногоМестаНаДискахUbuntu() + " ", 
						СкриптПолученияСвободногоМестаНаДискахUbuntu());

				// Подготавливаем временные файлы
		Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда 
			ПодключитьОбработчикОжидания("ПолучитьПутьВременногоКаталога", 5, Ложь); 
		КонецЕсли;

			Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда
				Возврат;
			Иначе 
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "sh";
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "log";
			КонецЕсли;

				// Подготавливаем файл скрипта
				ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
				ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.Закрыть();

				// Конвертируем файл скрипта, удаляя все следы "Windows"
				ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

				// Формируем команды и выполняем с указанным таймаутом в секундах
				КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
					+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
				КодВозвратаРезультат = Неопределено;
				НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

				// Получаем результатирующий вывод приложения
				//ТекстовыйДокумент = Новый ТекстовыйДокумент;
				//ТекстовыйДокумент.Прочитать(ФайлРезультатСкрипта, КодировкаТекста.UTF8);
				//РезультатВыполнения = ТекстовыйДокумент.ПолучитьТекст();

				// Очистка данных
				УдалитьФайлЕслиВозможно(ФайлСкрипта);
				УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

				// Обработка результата выполнения	
				Если НЕ КодВозвратаРезультат = 0 Тогда
					РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
						Возврат;
				КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочтениеРезультатТекстаСписокСерверов1С(Параметры) Экспорт

РезультатВыполнения = Параметры.ТекстовыйДокумент.ПолучитьТекст();

		Строки = СтрЗаменить(Параметры.ТекстовыйДокумент.ПолучитьТекст(), ":", Символы.ПС);
			Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
				Если 	СокрЛП(СтрПолучитьСтроку(СокрЛП(Строки), Индекс))  = "cluster" Тогда
					//Элементы.idКластераСервера1С.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С1.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С2.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С3.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С4.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С5.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С6.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
					Элементы.idКластераСервера1С7.СписокВыбора.Добавить(СокрЛП(СтрПолучитьСтроку(Строки, Индекс+1)), СокрЛП(СтрПолучитьСтроку(Строки, Индекс+7)));
				КонецЕсли; 
			КонецЦикла;

					РезультатВыполнения = "";
						Если ЭтаФорма.Элементы.idКластераСервера1С.СписокВыбора.Количество() > 0 Тогда 
							РезультатВыполнения = "Загрузка данных по серверам 1С произведена!";
							//idКластераСервера1С = Элементы.idКластераСервера1С.СписокВыбора.ЗагрузитьЗначения(.ВыбратьЭлемент(Элементы.idКластераСервера1С.СписокВыбора[0].Представление);
							//idКластераСервера1С = ВыбратьИзСписка(Элементы.idКластераСервера1С.СписокВыбора, Элементы.idКластераСервера1С2, Элементы.idКластераСервера1С.СписокВыбора[0])				
							//ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработкаОповещенияВыбораИзСписка", ЭтаФорма, Новый Структура),
							// Элементы.idКластераСервера1С2.СписокВыбора, Элементы.idКластераСервера1С2);
						Иначе
							РезультатВыполнения = "После загрузки, данных по серверам 1С не обраружено!";
						КонецЕсли;

				//ИнформацияЗаполнения = "server: " + Элементы.idКластераСервера1С1.СписокВыбора.НайтиПоЗначению(idКластераСервера1С).Представление +
				//	"date: " + ТекущаяДата();

		// Очистка данных
		//УдалитьФайлЕслиВозможно(ФайлСкрипта);
		//УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаУдалениеБазы1С(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда

	Если Не ЗначениеЗаполнено(idКластераСервера1С) Тогда 
		РезультатВыполнения = "Не выбран сервер 1С!";
		Возврат;
	КонецЕсли;

				ТекстКомандыДляВыполнения = ?(ТунельSSH,  "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
					ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптУдалениеБазы1С() + "'" + "", 
						СкриптУдалениеБазы1С());

				// Подготавливаем временные файлы
		Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда 
			ПодключитьОбработчикОжидания("ПолучитьПутьВременногоКаталога", 5, Ложь); 
		КонецЕсли;

			Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда
				Возврат;
			Иначе 
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "sh";
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "log";
			КонецЕсли;

				// Подготавливаем файл скрипта
				ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
				ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.Закрыть();

				// Конвертируем файл скрипта, удаляя все следы "Windows"
				ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

				// Формируем команды и выполняем с указанным таймаутом в секундах
				КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
					+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
				КодВозвратаРезультат = Неопределено;
				НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

				// Получаем результатирующий вывод приложения
				//ТекстовыйДокумент = Новый ТекстовыйДокумент;
				//ТекстовыйДокумент.Прочитать(ФайлРезультатСкрипта, КодировкаТекста.UTF8);
				//РезультатВыполнения = ТекстовыйДокумент.ПолучитьТекст();

				// Очистка данных
				//УдалитьФайлЕслиВозможно(ФайлСкрипта);
				//УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

				// Обработка результата выполнения	
				Если НЕ КодВозвратаРезультат = 0 Тогда
					РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
						Возврат;
				КонецЕсли;

		РезультатВыполнения = РезультатВыполнения + Символы.ПС + "База " + Символ(34) + Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С).Представление
			+ Символ(34) + " была успешно удалена из списка баз кластера 1С: " 
				+ Элементы.АдресСервераЧерезSSH.СписокВыбора.НайтиПоЗначению(АдресСервераЧерезSSH).Представление + ". ";

		ЭтаФорма.Элементы.База1С1.СписокВыбора.Удалить(Элементы.База1С1.СписокВыбора.Индекс(Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С)));
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С1);
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С2);
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С3);
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С4);
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С5);
			ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С6);
    КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлЕслиВозможно(НеобходимыйФайл)
    ОбратныйВызов = Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект, , "ФайловаяОшибка", ЭтотОбъект);
    НачатьУдалениеФайлов(ОбратныйВызов, НеобходимыйФайл);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗавершение(ДополнительныеПараметры) Экспорт
	//РезультатВыполнения = "Удаление успешно завершено";
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераЧерезSSHПриИзменении(Элемент)
	df = "";
КонецПроцедуры

&НаКлиенте
Процедура ВаринатВзаимодействияПриИзменении(Элемент)
	df = "";
КонецПроцедуры

&НаСервере
Процедура ИзменитьСодержаниеПодсказкиКоманды(СодержаниеПодсказки)
	ЭтаФорма.Команды.Найти("ВыполнитьСформированныйСкрипт").Подсказка = СодержаниеПодсказки;
КонецПроцедуры

&НаКлиенте
Процедура ТунельSSHПриИзменении(Элемент)

	Если ТунельSSH Тогда 
		ЭтаФорма.Элементы.Группа52.Доступность = Истина;
	Иначе 
		ЭтаФорма.Элементы.Группа52.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
КонецПроцедуры

#Область СписокСкриптов
/////////////////////////////////////////////////  cкрипты  bash  ///////////////////////////////////////////////////////////////////
//
//
//  /home/user/Рабочий\ стол/all для пробел в наименованиеи пути указываем слеш "\"
//   Пробел в имене файла, директории.
//

#Область СписокСкриптовDocker

&НаКлиенте
Функция СкриптПолученияСпискаКонтейнеровDocker()
	Возврат "docker ps";
КонецФункции

// Перезапуск всех контейнеров, описанных в docker-compose.yml: `docker-compose up -d`
//
//
//
&НаКлиенте
Функция СкриптПерезапускВсехКонтейнеровDocker()
	Возврат "docker-compose up -d";
КонецФункции

#КонецОбласти

#Область СписокСкриптовLinusDEB

&НаКлиенте
Функция СкриптПолученияВсехЗапущенныхСервисовUbuntu()
	Возврат "systemctl list-units --type=service --state=running"; // "systemctl list-units --type=service";
КонецФункции

&НаКлиенте
Функция СкриптПолученияСвободногоМестаНаДискахUbuntu()
	Возврат "df -h";
КонецФункции

// Скрипт получения списка всех папок исключая одну из них 
// 
//
&НаКлиенте
Функция СкриптПолученияСпискаПапокПоОпределнномуПути() 

	Возврат "`find /home/denis/backups -type d -not -regex "".*/site_api_postgres/.*"" | cut -d '/' -f 5`";

//вот что делает волшебная кавычка ` 
//denis@server:~/backups$ echo `find /home/denis/backups -type d -not -regex ".*/site_api_postgres/.*" | cut -d '/' -f 5`
//результат:
//amg aviaservice site_api_postgres mongodb weltall eastunion jetexpress aeroflot redwings bysky pobeda

//кроме "site_api_postgres" не работает 
//denis@server:~/backups$ find /home/denis/backups -type d -not -regex ".*/site_api_postgres/.*" | cut -d '/' -f 5

//результат:
//amg
//aviaservice
//site_api_postgres
//mongodb
//weltall
//eastunion
//jetexpress
//aeroflot
//redwings
//bysky
//pobeda

КонецФункции

&НаКлиенте
Процедура СкриптПроверкиСуществованияПапкиНаСеврере(ЗаписьТекста, ФайлСкрипта)

		ЗаписьТекста.Открыть(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10));
		ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.ЗаписатьСтроку(" if [ -z $1 ]");
		ЗаписьТекста.ЗаписатьСтроку("then");
		ЗаписьТекста.ЗаписатьСтроку(" echo 'parameter is Not specified '");
		ЗаписьТекста.ЗаписатьСтроку(" exit");
		ЗаписьТекста.ЗаписатьСтроку("fi");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.ЗаписатьСтроку("if ! [ -d $1 ]; then");
		ЗаписьТекста.ЗаписатьСтроку(" echo 'No directory'");
		ЗаписьТекста.ЗаписатьСтроку(" else");
		ЗаписьТекста.ЗаписатьСтроку(" echo 'directory available ' $1 ");
		ЗаписьТекста.ЗаписатьСтроку(" fi");
		ЗаписьТекста.Закрыть();

		// Конвертируем файл скрипта, удаляя все следы "Windows"
		ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

КонецПроцедуры

&НаСервере
Функция ТекстКомандыИзмененияПравНаФайлРезультата() 
	Возврат "echo " + "'"+ ПолучитьПарольСуперПользователя() + "'" + " | sudo -S chmod 667 " + ФайлРезультатСкрипта;
КонецФункции

#КонецОбласти

#Область СписокСкриптов1C

// sudo systemctl stop srv1cv83.service
// sudo systemctl start srv1cv83.service
//
&НаСервере
Функция СкриптПерезагрузкиСервера1С()
	Возврат "echo " + "'" + ПолучитьПарольСуперПользователя() + "'" + " | sudo -S service srv1cv83 restart";
КонецФункции

&НаСервере
Функция СкриптПолученияСтатусаСервера1С()
	Возврат "service srv1cv83 status";
КонецФункции

&НаСервере
Функция СкриптОстановкиСервера1С()
	Возврат "echo " + "'"+ ПолучитьПарольСуперПользователя() + "'"+ " | sudo -S service srv1cv83 stop";
КонецФункции

&НаСервере
Функция ПолучитьПарольСуперПользователя()

КонецФункции

&НаКлиенте
Функция СкриптПолученияIDКластераСервера1С()
	Возврат	"/opt/1C/v8.3/i386/rac cluster list | grep cluster | awk '/(.*)/{print $3}'";
КонецФункции

&НаКлиенте
Функция СкриптПолучениеДанныхПоСерверам1С()
	Возврат "/opt/1C/v8.3/i386/rac cluster list";
КонецФункции

&НаКлиенте
Функция СкриптПолучениеДанныхПоСерверам1СНаСервере()
	Возврат "/opt/1C/v8.3/i386/rac cluster list";
КонецФункции

&НаКлиенте
Функция СкриптПолучениеДанныхПоОпределенномуСерверу1С()
	Возврат "/opt/1C/v8.3/i386/rac cluster info --cluster=" + idКластераСервера1С.IDСервера1С;
КонецФункции

&НаКлиенте
Функция ПолучитьПолныйПутьДоРаботающегоСервера1С()
	Возврат "";
КонецФункции

// Скрипт получения данных об id кластере сервера 1С
//
// /opt/1C/v8.3/i386/rac cluster list 
//
// если платформа 64 битная то /opt/1C/v8.3/x86_64/rac
//
&НаКлиенте
Функция СкриптПолученияИнформацииОКлсстереСервера1С()
	Возврат	"/opt/1C/v8.3/i386/rac cluster list";
КонецФункции

// Скрипт удаления базы 1С
//
//
&НаКлиенте
Функция	СкриптУдалениеБазы1С()
	Возврат	"/opt/1C/v8.3/i386/rac infobase --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С +  " drop --infobase=" + База1С.idБазы1С;
КонецФункции

// Скрипт получения списка всех баз опубликованных в кластере сервера 1С
//
//&НаКлиенте
&НаСервере
Функция СкриптПолучениеДанныхОБазах1С() 
	Возврат "/opt/1C/v8.3/i386/rac infobase --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С +" summary list";
КонецФункции

// Скрипт получения списка всех баз опубликованных в кластере сервера 1С
//
&НаСервере
Функция СкриптПолучениеДанныхОбАктивныхПользователяхБазы1С() 
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С +" list --infobase=" + База1С.idБазы1С;
КонецФункции

// Скрипт получения ID активных сессий в кластере сервера 1С
&НаСервере
Функция СкриптПолучениеДанныхIDАктивныхПользователяхБазы1С()
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" +  idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С +" list --infobase=" + 
			База1С.idБазы1С + "| grep  " + Символ(34) + "^session " + Символ(34) + " | awk '/(.*)/{print $3}'";
КонецФункции

&НаСервере
Функция СкриптПолучениеАктивныхСессий1С()
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" +
			 АдминистраторСервера1С + " --cluster-pwd=" + ПарольАдминистратораСервера1С + " list --infobase=" +
				База1С.idБазы1С + " | grep 'app-id\|^session'";
КонецФункции

&НаКлиенте
Функция СкриптПолучениеДанныхПоОпределеннойАктивнойСессии1С()
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" +  idКластераСервера1С.IDСервера1С + "  --cluster-user=" + 
		АдминистраторСервера1С + "  --cluster-pwd=" +  ПарольАдминистратораСервера1С + " info --session=" + СписокПользователей1С;
КонецФункции

// Скрипт удаления активной сессии на сервере 1С
&НаСервере
Функция СкриптУдалениеАктивнойСессии1С()
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С + " terminate --session=" + idСессииПользователя1С;
КонецФункции

// Скрипт удаления всех активных сессий на сервере 1С
&НаСервере
Функция СкриптУдалениеВсехАктивныхСессии1С(IDПользователя)
//+ "'" +
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" + Строка(idКластераСервера1С.IDСервера1С) + " --cluster-user=" + 
		Строка(АдминистраторСервера1С) + " --cluster-pwd=" +  Строка(ПарольАдминистратораСервера1С) + " terminate --session=" + Строка(IDПользователя);
КонецФункции

// Скрипт удаления активной сессии открытого конфигуратора
&НаКлиенте
Функция СкриптУдалениеАктивнойСессииКонфигуратора1С()
	Возврат "/opt/1C/v8.3/i386/rac session --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С + " terminate --session=" + СписокПользователей1С;
 
//sessions terminate -i amg --designer

КонецФункции

// Скрипт блокировки регламентных заданий на сервере 1С 
//
//
&НаСервере
Функция СкриптУправленияБлокировкиРегламентныхЗаданийНаСервере1С() 
	Возврат "/opt/1C/v8.3/i386/rac infobase --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + 
		АдминистраторСервера1С + " --cluster-pwd=" +  ПарольАдминистратораСервера1С + " update --infobase=" + База1С.idБазы1С +
		 " --infobase-user=" + АдминистраторБазы1С + " --infobase-pwd=" + ПарольАдминистратораБазы1С + " --scheduled-jobs-deny=" + 
			?(БлокироватРегламентныеЗаданияБазы1С, "off", "on");
КонецФункции

// Скрипт получения подробной информации о базе 1С
//
//
&НаСервере
Функция СкриптПолученияПодробнойИнформацииОБазе1С()
	Возврат "/opt/1C/v8.3/i386/rac infobase --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + АдминистраторСервера1С + 
		" --cluster-pwd=" + ПарольАдминистратораСервера1С + " info --infobase=" + База1С.idБазы1С + " --infobase-user=" + АдминистраторБазы1С +
		 " --infobase-pwd=" + ПарольАдминистратораБазы1С + "";
КонецФункции

//Скрипт получения включенной или выключенной настройки выполениния регламентных заданий
&НаСервере
Функция СкриптПолученияНастройкиРегламентныхЗаданийТекущейБазы1С()
	Возврат "/opt/1C/v8.3/i386/rac infobase --cluster=" + idКластераСервера1С.IDСервера1С + " --cluster-user=" + АдминистраторСервера1С + 
		" --cluster-pwd=" + ПарольАдминистратораСервера1С + " info --infobase=" + База1С.idБазы1С + " --infobase-user=" + АдминистраторБазы1С +
		 " --infobase-pwd=" + ПарольАдминистратораБазы1С + " | grep  ^scheduled-jobs-deny";
КонецФункции

//pipenv run cli infobases save aeroflot ~/cfs/3888 -u admin -p ghzybrcjcvtnfyjq
//xvfb-run -a /opt/1C/v8.3/i386/1cv8 config /S localhost/aeroflot /N admin /P ghzybrcjcvtnfyjq /DumpCfg /home/denis/cfs/3888.cf
&НаСервере
Функция СкриптВыгрузкиCFФайлаБазы1C()
	Возврат "xvfb-run -a /opt/1C/v8.3/i386/1cv8 CONFIG /S " + idКластераСервера1С.Наименование + "\" + База1С.Наименование + "/N " +АдминистраторБазы1С + 
		"/P " + ПарольАдминистратораБазы1С + " /DumpCfg " + ?(ЗначениеЗаполнено(ПутьСохраненияФайлаCF), ПутьСохраненияФайлаCF,
		 "~/cfs") + ?(Прав(СокрЛП(ПутьСохраненияФайлаCF), 1) = "/" , "", "/") + База1С.Наименование + "-" + Строка(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy-HH-MM")) + ".cf";
КонецФункции

// Скрипт примеры 1С 
//
//
&НаКлиенте
Функция ПримерыСкриптов()


//dev (vl)

//new-core
//pipenv run cli sessions terminate -i new-core
//pipenv run cli infobases dump new-core ~/dumps/nc201117.dt -u admin -p 12345
//pipenv run cli infobases load new-core ~/cfs/release11017.cf -u admin -p 12345

//trainingnajet
//pipenv run cli sessions terminate -i trainingnajet
//pipenv run cli infobases dump trainingnajet ~/dumps/tr201117.dt -u admin -p 12345
//pipenv run cli infobases load trainingnajet ~/cfs/release11017.cf -u admin -p 12345


//prod (server)

//test
//pipenv run cli sessions terminate -i test
//pipenv run cli infobases dump test ~/dumps/ts200728.dt -u admin -p 12345
//pipenv run cli infobases load test ~/cfs/release11011.cf -u admin -p 12345

//aeroflot
//pipenv run cli sessions terminate -i aeroflot
//pipenv run cli infobases dump aeroflot ~/dumps/af200728.dt -u admin -p 12345
//pipenv run cli infobases load aeroflot ~/cfs/release11011.cf -u admin -p 12345

//
//Пример сохранения конфигурации базы aeroflot
//pipenv run cli infobases save aeroflot ~/cfs/3888.сf -u admin -p 12345

КонецФункции

#КонецОбласти

#Область СписокСкриптовPostgres

&НаСервере
Функция СкриптПолученияИнформацииПоСпискуБазPostgres()
	Возврат "echo " + "'"+ ПолучитьПарольСуперПользователя() + "'" + " | sudo -S -u postgres psql -c " + "'" + "\l" + "'";
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Функция ПолучитьIDКластераСервера1СЧерезSSH()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияIDКластераСервера1С() + " ",
				СкриптПолученияIDКластераСервера1С());

		// Подготавливаем временные файлы
		Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда 
			ПодключитьОбработчикОжидания("ПолучитьПутьВременногоКаталога", 5, Ложь); 
		КонецЕсли;

			Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда
				Возврат "";
			Иначе 
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "sh";
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "log";
			КонецЕсли;

		// Подготавливаем файл скрипта
		ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
		ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Закрыть();

		// Конвертируем файл скрипта, удаляя все следы "Windows"
		ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

		// Формируем команды и выполняем с указанным таймаутом в секундах
		КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
			+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
		КодВозвратаРезультат = Неопределено;
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

		// Получаем результатирующий вывод приложения
		ТекстовыйДокумент = ""; //Новый ТекстовыйДокумент;
		//ТекстовыйДокумент.Прочитать(ФайлРезультатСкрипта, КодировкаТекста.UTF8);
		//РезультатВыполненияСкрипта = ТекстовыйДокумент.ПолучитьТекст();

		// Очистка данных
		УдалитьФайлЕслиВозможно(ФайлСкрипта);
		УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

		// Обработка результата выполнения	
		Если НЕ КодВозвратаРезультат = 0 Тогда
			РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
				Возврат 0;
		КонецЕсли;

	Возврат СокрЛП(РезультатВыполненияСкрипта);

КонецФункции

&НаКлиенте
Процедура ПолучитьСписокСерверов1С()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптПолучениеДанныхПоСерверам1С() + "'" + " ", 
				СкриптПолучениеДанныхПоСерверам1С());

		// Подготавливаем временные файлы
		//ПолучитьПутьВременногоФайла();

		// Подготавливаем файл скрипта
		ЗаписьТекстаСкриптаНаСервере(ТекстКомандыДляВыполнения, ФайлСкрипта);

		// Конвертируем файл скрипта, удаляя все следы "Windows"
		ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

		// Формируем команды и выполняем с указанным таймаутом в секундах
		КомандаЗапускаСкрипта = "timeout " + "10"  + "s /bin/bash '"
			+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	

		Оповещение = Новый ОписаниеОповещения("ОповещениеЗапускПриложенияСписокСерверов1С", ЭтотОбъект);
		НачатьЗапускПриложения(Оповещение, КомандаЗапускаСкрипта,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокСерверов1СВебКлиент()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптПолучениеДанныхПоСерверам1С() + "'" + " ", 
				СкриптПолучениеДанныхПоСерверам1С());

		// Подготавливаем временные файлы
		//ПолучитьПутьВременногоФайла();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлНаСервере(Параметры, ДополнительныеПараметры) Экспорт
			
		//// Формируем команды и выполняем с указанным таймаутом в секундах
		//КомандаЗапускаСкрипта = "timeout " + "10"  + "s /bin/bash '"
		//	+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	

		//Оповещение = Новый ОписаниеОповещения("ОповещениеЗапускПриложенияСписокСерверов1С", ЭтотОбъект);
		//НачатьЗапускПриложения(Оповещение, КомандаЗапускаСкрипта,, Истина);

	ЗавершениеОбратныйВызов = Новый ОписаниеОповещения("ЗавершениеОбратныйВызов", ЭтотОбъект);
	ПрогрессОбратныйВызов = Новый ОписаниеОповещения("ПрогрессОбратныйВызов", ЭтотОбъект);
	ПередНачалоОбратныйВызов = Новый ОписаниеОповещения("ПередНачалоОбратныйВызов", ЭтотОбъект);	
	//НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов, ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов,, ФайлСкрипта);	
	НачатьПомещениеФайлаНаСервер(,,,, ФайлСкрипта);	

РезультатВыполнения = "24: "  + ФайлСкрипта;
РезультатВыполнения = "25: "  + ФайлРезультатСкрипта;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	//тСтрока = Base64Строка(ПолучитьИзВременногоХранилища(ОписаниеПомещенногоФайла.Адрес));
	//тСтрока = Прав(тСтрока, СтрДлина(тСтрока) - 4);
	//Base64Значение(тСтрока).НачатьЗапись(Новый ОписаниеОповещения("ЗаписатьBase64Значение", ЭтотОбъект), ФайлСкрипта);
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьBase64Значение(Параметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗапускПриложенияСписокСерверов1С(КодВозврата, ДополнительныйПараметр) Экспорт

		   #Если МобильноеПриложениеКлиент Тогда
				Возврат;
			#Иначе 
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ПараметрыЧтения = Новый Структура("ТекстовыйДокумент", ТекстовыйДокумент);
				ТекстовыйДокумент.НачатьЧтение(Новый ОписаниеОповещения("ПрочтениеРезультатТекстаСписокСерверов1С", ЭтотОбъект, ПараметрыЧтения), ФайлРезультатСкрипта, КодировкаТекста.UTF8);
		   #КонецЕсли

КонецПроцедуры

//&НаКлиенте
//Процедура ПолучитьПутьВременногоФайла()
//	ОбратныйВызов = Новый ОписаниеОповещения("ПолучитьКаталогВременныхФайловСкриптов", ЭтотОбъект);
//	НачатьПолучениеКаталогаВременныхФайлов(ОбратныйВызов);
//КонецПроцедуры

//&НаКлиенте
//Процедура ПолучитьКаталогВременныхФайловСкриптов(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
//	СохранитьНаСервереИсходник();
//КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПодробнойИнформацииОТекущейСессииПользователя()

	Если Не ЗначениеЗаполнено(idКластераСервера1С) Тогда 
		РезультатВыполнения = "Не выбран сервер 1С!";
		Возврат;
	КонецЕсли;

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "'" +  " '" + СкриптПолучениеДанныхПоОпределеннойАктивнойСессии1С() + "' " + " ", 
				СкриптПолучениеДанныхПоОпределеннойАктивнойСессии1С()); 

		// Подготавливаем временные файлы
		Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда 
			ПодключитьОбработчикОжидания("ПолучитьПутьВременногоКаталога", 5, Ложь); 
		КонецЕсли;

			Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда
				Возврат;
			Иначе 
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "sh";
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "log";
			КонецЕсли;

		// Подготавливаем файл скрипта
		ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
		ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Закрыть();

		// Конвертируем файл скрипта, удаляя все следы "Windows"
		ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

		// Формируем команды и выполняем с указанным таймаутом в секундах
		КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
			+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
		КодВозвратаРезультат = Неопределено;
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

		// Получаем результатирующий вывод приложения
		ТекстовыйДокумент = ""; //Новый ТекстовыйДокумент;
		//ТекстовыйДокумент.Прочитать(ФайлРезультатСкрипта, КодировкаТекста.UTF8);
		//РезультатВыполненияСкрипта = ТекстовыйДокумент.ПолучитьТекст();

		// Очистка данных
		УдалитьФайлЕслиВозможно(ФайлСкрипта);
		УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

		// Обработка результата выполнения	
		Если НЕ КодВозвратаРезультат = 0 Тогда
			РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  ТекстКомандыДляВыполнения +
			  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
		КонецЕсли;

	РезультатВыполнения = РезультатВыполненияСкрипта;

КонецПроцедуры

// удаляем из текстового файла "ФайлСкрипта" спецсимвол BOM
//
//
//
&НаКлиенте
Процедура ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта)

	тДанные = Новый ДвоичныеДанные(ФайлСкрипта);
	тСтрока = Base64Строка(тДанные);
	тСтрока = Прав(тСтрока, СтрДлина(тСтрока) - 4);
	Base64Значение(тСтрока).Записать(ФайлСкрипта);

КонецПроцедуры

&НаКлиенте
Процедура База1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	//ва = "";
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераЧерезSSHОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПользовательСервераЧерезSSH = "";
	ПарольПользовательСервераЧерезSSH = "";
	ПарольАдминистратораСервера1С = "";
	АдминистраторСервера1С	 = "";
	idКластераСервера1С = "";

	ИнформацияЗаполнения = "server: " + Элементы.АдресСервераЧерезSSH.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление +
		"   date: " + ТекущаяДата();

КонецПроцедуры

&НаКлиенте
Процедура АдресСервераЧерезSSHОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	ПользовательСервераЧерезSSH = "";
	ПарольПользовательСервераЧерезSSH = "";
	ПарольАдминистратораСервера1С = "";
	АдминистраторСервера1С	 = "";
	idКластераСервера1С = "";

	//ИнформацияЗаполнения = "server: " + Элементы.АдресСервераЧерезSSH.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение).Представление +
	//	"date: " + ТекущаяДата();

КонецПроцедуры

&НаКлиенте
Процедура ПользовательСервераЧерезSSHОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПарольПользовательСервераЧерезSSH = "";
КонецПроцедуры

&НаКлиенте
Процедура ПользовательСервераЧерезSSHОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПарольПользовательСервераЧерезSSH = "";
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсехПользователей1СПриИзменении(Элемент)
	
		Если ОтключитьВсехПользователей1С Тогда 
			СписокПользователей1С = "";
			ЭтаФорма.Элементы.СписокПользователей1С.Доступность = Ложь;
			ЭтаФорма.Элементы.ПолучитьСписокАктивныхПользоваталей.Доступность = Ложь;
		Иначе 
			ЭтаФорма.Элементы.СписокПользователей1С.Доступность = Истина;
			ЭтаФорма.Элементы.ПолучитьСписокАктивныхПользоваталей.Доступность = Истина;
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВаринатВзаимодействияDockerПриИзменении(Элемент)
	
	Если ВаринатВзаимодействияDocker = "Перезагрузить сервис" Тогда

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Перезагрузить сервис Docker");

	ИначеЕсли ВаринатВзаимодействияDocker = "Получить список контейнеров" Тогда
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Получить список контейнеров");

	Иначе 
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВаринатВзаимодействия1СПриИзменении(Элемент)
	
	Если ВаринатВзаимодействия1С = "Удаление базы" Тогда
		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина;
		Элементы.ГруппаБаза1С.Видимость = Истина;
		Элементы.ГруппаКонфигуратор.Видимость = Ложь;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Ложь;
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Ложь;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Удаление базы 1С");

	ИначеЕсли ВаринатВзаимодействия1С = "Резервное копирование базы" Тогда

			Если Не ЗначениеЗаполнено(База1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнен список баз 1С!", 0, "Внимание!");
				Возврат;
			КонецЕсли;

		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Ложь;
		Элементы.ГруппаКонфигуратор.Видимость = Ложь; 
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Ложь;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Резервное копирование баз 1С");
	
	ИначеЕсли ВаринатВзаимодействия1С = "Обновление базы" Тогда

			Если Не ЗначениеЗаполнено(База1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнен список баз 1С!", 0, "Внимание!");
				Возврат;
			КонецЕсли;

		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина;
		Элементы.ГруппаБаза1С.Видимость = Истина;
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Истина;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Истина;
		Элементы.ГруппаКонфигуратор.Видимость = Ложь;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Обновление баз 1С");

	ИначеЕсли ВаринатВзаимодействия1С = "Перезагрузить сервер" Тогда
		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина;
		Элементы.ГруппаБаза1С.Видимость = Ложь;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Ложь;
		Элементы.ГруппаКонфигуратор.Видимость = Ложь;
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Ложь;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Перезагрузить сервер 1С");

	ИначеЕсли ВаринатВзаимодействия1С = "Подробная информация базы" Тогда   
		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина; 
		Элементы.ГруппаКонфигуратор.Видимость = Истина; 
		Элементы.ГруппаБаза1С.Видимость = Истина;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Ложь;
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Истина;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Подробная информация о базе 1С");

	ИначеЕсли ВаринатВзаимодействия1С = "Остановка фоновых заданий" Тогда

			Если Не ЗначениеЗаполнено(База1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнен список баз 1С!", 0, "Внимание!");
				Возврат;
			КонецЕсли;
   
		Элементы.ГруппаАдминистраторСервера1С.Видимость = Истина; 
		Элементы.ГруппаКонфигуратор.Видимость = Ложь; 
		Элементы.ГруппаБаза1С.Видимость = Истина;
		Элементы.ГруппаОбновлениеБазы1С.Видимость = Ложь;
		Элементы.ГруппаАдминистраторБазы1С.Видимость = Истина;
		Элементы.ГруппаБлокировкаРегламентныхЗаданийБазы1С.Видимость = Ложь;

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Остановка фоновых заданий в базе 1С");

	Иначе 
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Ложь;
			ИзменитьСодержаниеПодсказкиКоманды("Не выбран ни один элемент выполнения");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВаринатВзаимодействияUbuntuПриИзменении(Элемент)

	Если ВаринатВзаимодействияUbuntu = "Перезагрузить сервер" Тогда

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Перезагрузить сервер");
	
	ИначеЕсли ВаринатВзаимодействияUbuntu = "Место на дисках" Тогда

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Получить размер свободного места на дисках");

	ИначеЕсли ВаринатВзаимодействияUbuntu = "Запущенные сервисы" Тогда

			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Получить все запущенные сервисы");

	Иначе 
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Ложь;
			ИзменитьСодержаниеПодсказкиКоманды("Не выбран ни один элемент выполнения");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВаринатВзаимодействияApacheПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьИнформациюПоТекущемуСерверу()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + " '" + СкриптПолучениеДанныхПоОпределенномуСерверу1С() + "' " + " ",
				СкриптПолучениеДанныхПоОпределенномуСерверу1С());

		// Подготавливаем временные файлы
		Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда 
			ПодключитьОбработчикОжидания("ПолучитьПутьВременногоКаталога", 5, Ложь); 
		КонецЕсли;

			Если КаталогВременныхФайлов = "" Или КаталогВременныхФайлов <> Неопределено Тогда
				Возврат;
			Иначе 
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "sh";
				ФайлСкрипта = КаталогВременныхФайлов + "/" + Строка(Новый УникальныйИдентификатор) + "." + "log";
			КонецЕсли;

		// Подготавливаем файл скрипта
		ЗаписьТекста = Новый ЗаписьТекста(ФайлСкрипта, КодировкаТекста.UTF8, , , Символ(10)); 
		ЗаписьТекста.ЗаписатьСтроку("#!/bin/sh");
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Записать(ТекстКомандыДляВыполнения);
		ЗаписьТекста.ЗаписатьСтроку("");
		ЗаписьТекста.Закрыть();

		// Конвертируем файл скрипта, удаляя все следы "Windows"
		ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

		// Формируем команды и выполняем с указанным таймаутом в секундах
		КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
			+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
		КодВозвратаРезультат = Неопределено;
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

		// Получаем результатирующий вывод приложения
		ТекстовыйДокумент = ""; // Новый ТекстовыйДокумент;
		//ТекстовыйДокумент.Прочитать(ФайлРезультатСкрипта, КодировкаТекста.UTF8);
		//РезультатВыполненияСкрипта = ТекстовыйДокумент.ПолучитьТекст();

		// Очистка данных
		УдалитьФайлЕслиВозможно(ФайлСкрипта);
		УдалитьФайлЕслиВозможно(ФайлРезультатСкрипта);

		// Обработка результата выполнения	
		Если НЕ КодВозвратаРезультат = 0 Тогда
			РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС + 
				ТекстКомандыДляВыполнения + Символы.ПС  + " Код возврата: " + КодВозвратаРезультат;
					Возврат;
		КонецЕсли;

	РезультатВыполнения = РезультатВыполненияСкрипта;

КонецПроцедуры

#Область ИнформацияПоТекущейБазе

&НаКлиенте
Процедура ОтобразитьИнформациюПоТекущейБазе()

	Если ТунельSSH Тогда 
		Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
			Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(idКластераСервера1С) 
			Или Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) 
			Или Не ЗначениеЗаполнено(База1С)   Или Не ЗначениеЗаполнено(АдминистраторБазы1С) Или
			Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	Иначе 
		Если Не ЗначениеЗаполнено(idКластераСервера1С) Или Не ЗначениеЗаполнено(АдминистраторСервера1С) 
			Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) 	Или Не ЗначениеЗаполнено(База1С)
			Или Не ЗначениеЗаполнено(АдминистраторБазы1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОтображениеИнформацииПоТекущейБазе1С();

КонецПроцедуры

&НаСервере
Процедура ОтображениеИнформацииПоТекущейБазе1С()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияПодробнойИнформацииОБазе1С() + " ", 
			СкриптПолученияПодробнойИнформацииОБазе1С()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтобразитьИнформациюПоТекущемуПользователю()

		Если ТунельSSH Тогда  
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		Иначе 
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
						Не ЗначениеЗаполнено(База1С) Тогда
							Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
								ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ПолучениеПодробнойИнформацииОТекущейСессииПользователя();

КонецПроцедуры

#Область ПолучитьСписокБаз1С

&НаКлиенте
Процедура ПолучитьСписокБаз1С1(Команда)

				Если ТунельSSH Тогда 
					Если Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
						Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
						Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
							Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
									ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
						Возврат;
					КонецЕсли;
				Иначе 
					Если Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
							ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
						Возврат;
					КонецЕсли;
				КонецЕсли;

		ЗаполнитьСписокВыбораБаз1С();

		ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С1);
		ОбновитьОтображениеДанных(ЭтаФорма.Элементы.База1С3);

		Если РезультатВыполненияТЧ.Количество() > 0 Тогда 
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, "Загрузка данных по базам 1С произведена." + Символы.ПС + 
			" Заполните поле " + Символ(34) + "База 1С" + Символ(34) + "!", 0, "Информация!");
		КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораБаз1С()

	Элементы.База1С1.СписокВыбора.Очистить();
	Элементы.База1С2.СписокВыбора.Очистить();
	Элементы.База1С3.СписокВыбора.Очистить();
	Элементы.База1С4.СписокВыбора.Очистить();
	Элементы.База1С5.СписокВыбора.Очистить();
	Элементы.База1С6.СписокВыбора.Очистить();
	
	РезультатВыполнения = "";

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолучениеДанныхОБазах1С() + " ", 
				СкриптПолучениеДанныхОБазах1С());

		База1С = ПредопределенноеЗначение("Справочник.База1С.ПустаяСсылка");
		АдминистраторБазы1С = "";
		ПарольАдминистратораБазы1С = "";
		ОчисткаСправочникаБаза1С();
		СохранитьНаСерверИсходникСкрипта();
		ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);
		ЗаполнитьДанныеПоПолученномуСпискуБаз1С(РезультатВыполненияТЧ,  idКластераСервера1С);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчисткаСправочникаБаза1С()

	Выборка = Справочники.База1С.Выбрать(); 
	Пока Выборка.Следующий() Цикл 
		СпрБаза1С = Выборка.ПолучитьОбъект();
		СпрБаза1С.Удалить();  
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоПолученномуСпискуБаз1С(РезультатВыполненияТЧ, ТекущСервер1С)

	// найти строку в ТЧ Документа
		Поискinfobaser = РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "infobase"));
		Поискname = РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "name"));
			ИндексМассива = 0;
			Для Каждого Строкаотбора Из Поискinfobaser Цикл 
 							//   Справочники.База1С.НайтиПоРеквизиту("База1С", Поискinfobaser[ИндексМассива].Реквизит3).Ссылка.Пустая()
				Если Не ПроверкаНаИмеющуюсяЗаписьВСправочникеБаза1С(Поискinfobaser[ИндексМассива].Реквизит3) Тогда
						ОбъектСправочникаБаза1С = Справочники.База1С.СоздатьЭлемент(); 
						ОбъектСправочникаБаза1С.Наименование = Поискname[ИндексМассива].Реквизит3;
						ОбъектСправочникаБаза1С.idБазы1С = Поискinfobaser[ИндексМассива].Реквизит3;
						ОбъектСправочникаБаза1С.Владелец = ТекущСервер1С.Ссылка ;
					Попытка
						ОбъектСправочникаБаза1С.Записать();
					Исключение
						РезультатВыполнения = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			ИндексМассива = ИндексМассива + 1;
		КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаИмеющуюсяЗаписьВСправочникеБаза1С(Результатinfobase)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("idБазы1С", Результатinfobase);
		Запрос.Текст = "ВЫБРАТЬ
		   |	База1С.Представление КАК Представление1
		   |ИЗ
		   |	Справочник.База1С КАК База1С
		   |ГДЕ
		   |	База1С.idБазы1С = &idБазы1С
		   |	И НЕ База1С.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат Истина;
		КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура База1С3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	//СтандартнаяОбработка = Ложь;
	//ЗначениеОтбора = Новый Структура("Сервер1С", idКластераСервера1С);
	//ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	//ОткрытьФорму("Справочник.База1С.ФормаВыбора", ПараметрыВыбора);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗакрытьКонфигураторБазы1С(Команда)

	Если Элементы.База1С1.СписокВыбора.Количество() > 0 Тогда 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Группа18ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//Если Элементы.Группа10
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьDTФайлПриИзменении(Элемент)
	АрхивироватьCFФайл = ?(АрхивироватьCFФайл, Ложь, АрхивироватьCFФайл);
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьCFФайлПриИзменении(Элемент)
	Если АрхивироватьDTФайл Тогда 
		АрхивироватьDTФайл = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБазу1С(Команда)
	
	РезультатВыполнения = "";
	Элементы.РезультатВыполнения.ОбновитьТекстРедактирования();

		Если ТунельSSH Тогда 
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Тогда
				РезультатВыполнения = "Не заполнены основные поля !";
				Возврат;
			КонецЕсли;
		Иначе 
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(База1С) Тогда
				РезультатВыполнения = "Не заполнены основные поля !";
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Если Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С) = Неопределено Тогда
			РезультатВыполнения = "";
			Элементы.РезультатВыполнения.ОбновитьТекстРедактирования();
				РезультатВыполнения = "Текущая база 1С " + Символ(34) + База1С + Символ(34) + " не обнаружена!";
			Возврат;
		КонецЕсли;

	    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаУдалениеБазы1С", ЭтотОбъект);	
	     ПоказатьВопрос(Оповещение, "Вы уверны что хотиете безвозвратно удалить " +Символы.ПС + " базу 1С " + Символ(34) +
			 Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С).Представление  + Символ(34) + " ?",
	        	РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Внимание!" );

КонецПроцедуры

///////////////////////////////////////////////////////////////////////   1С   ////////////////////////////////////////////////////////////////////////////////////
#Область Команды1С

#Область ПолучитьСписокКластеров1С

&НаКлиенте
Процедура ПолучитьСписокКластеров1С(Команда)

	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	// в зависимости от того файловый это вариант БД или нет,  по-разному отображается путь в БД 
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	Если ПозицияПоиска = 1 тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Данная настройка предназначена для серверного варианта базы данных 1С. Поиск Сервера отменен !", 0, "Внимание!");
			Возврат;
	КонецЕсли;   

	Если ТунельSSH Тогда 
		Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
			Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если РазмерСправочника("Сервер1С") > 0 Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Перед обновлением список будет удален." + Символы.ПС + "Выполнить обновление ?",
		РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, "Внимание !");
	Иначе 
	    ПолучениеДанныхПоКластеру1С();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РазмерСправочника(ИмяСправочника)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Спр" +ИмяСправочника + ".Представление КАК Представление
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК Спр" + ИмяСправочника + "
		|ГДЕ
		|	НЕ Спр" + ИмяСправочника + ".ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().Количество();

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
		ПолучениеДанныхПоКластеру1С();
    КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеДанныхПоКластеру1С()

		АдминистраторСервера1С = "";
		ПарольАдминистратораСервера1С = "";
		База1С = ПредопределенноеЗначение("Справочник.База1С.ПустаяСсылка");
		АдминистраторБазы1С = "";
		ПарольАдминистратораБазы1С = "";

		Элементы.idКластераСервера1С1.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С2.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С3.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С4.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С5.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С6.СписокВыбора.Очистить();
		Элементы.idКластераСервера1С7.СписокВыбора.Очистить();
			Элементы.idКластераСервера1С1.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С2.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С3.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С4.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С5.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С6.ОбновитьТекстРедактирования();
			Элементы.idКластераСервера1С7.ОбновитьТекстРедактирования();

			ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
				ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптПолучениеДанныхПоСерверам1СНаСервере() + "'" + " ", 
					СкриптПолучениеДанныхПоСерверам1СНаСервере());

			ОчисткаСправочникаСервер1С();
			СохранитьНаСерверИсходникСкрипта();
			ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);
			
		#Если ВебКлиент Тогда
			Если ЕстьСтрокиСНулевымКоличеством(РезультатВыполненияТЧ) Тогда
				ЗаполнитьДанныеПоСерверу1С(РезультатВыполненияТЧ);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Табличная часть " + Символ(34) +
					"Результат выполнения" + Символ(34) + " не заполнена.", 0, "Внимание!");
			КонецЕсли;
		#ИначеЕсли Клиент Тогда
			
			перем_РезультатВыполненияТЧ = РезультатВыполненияТЧ;	
			
			Если ЕстьСтрокиСНулевымКоличеством(перем_РезультатВыполненияТЧ) Тогда
				ЗаполнитьДанныеПоСерверу1С(перем_РезультатВыполненияТЧ);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Табличная часть " + Символ(34) +
					"Результат выполнения" + Символ(34) + " не заполнена.", 0, "Внимание!");
			КонецЕсли;
		#КонецЕсли
					
КонецПроцедуры		

&НаСервереБезКонтекста
Процедура ОчисткаСправочникаСервер1С()

	ВыборкаСервер1С = Справочники.Сервер1С.Выбрать(); 
	Пока ВыборкаСервер1С.Следующий() Цикл 
		СпрСервер1С = ВыборкаСервер1С.ПолучитьОбъект();
			Попытка
				СпрСервер1С.Удалить();  
			Исключение
				РезультатВыполнения = ОписаниеОшибки();
			КонецПопытки;
	КонецЦикла;

	ВыборкаБаза1С = Справочники.База1С.Выбрать(); 
	Пока ВыборкаБаза1С.Следующий() Цикл 
		СпрБаза1С = ВыборкаБаза1С.ПолучитьОбъект();
		СпрБаза1С.Владелец = Справочники.Сервер1С.ПустаяСсылка();
			Попытка
				СпрБаза1С.Записать();
			Исключение
				РезультатВыполнения = ОписаниеОшибки();
			КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЕстьСтрокиСНулевымКоличеством(Знач РезультатВыполненияТЧ)
	Возврат РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "cluster")).Количество() > 0; 
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоСерверу1С(РезультатВыполненияТЧ)

	Если Не ЕстьСтрокиСНулевымКоличеством(РезультатВыполненияТЧ)Тогда 
	  Возврат;
	КонецЕсли;
		
		// найти строку в ТЧ Документа
			Поискcluster = РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "cluster"));
			Результатcluster = Поискcluster[0].Реквизит3;

			Поискhost = РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "host"));
			Результатhost = Поискhost[0].Реквизит3;

							//   Справочники.Сервер1С.НайтиПоРеквизиту("IDСервера1С", Результатcluster).Ссылка.Пустая()
				Если Не ПроверкаНаИмеющуюсяЗаписьВСправочникеСервер1С(Результатcluster) Тогда
					ОбъектСправочникаСервер1С = Справочники.Сервер1С.СоздатьЭлемент(); 
					ОбъектСправочникаСервер1С.Наименование = Результатhost;
					ОбъектСправочникаСервер1С.IDСервера1С = Результатcluster;

					Попытка
						ОбъектСправочникаСервер1С.Записать();
					Исключение
						РезультатВыполнения = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаИмеющуюсяЗаписьВСправочникеСервер1С(Результатcluster)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("IDСервера1С", Результатcluster);
	Запрос.Текст = "ВЫБРАТЬ
       |	Сервер1С.Представление КАК Представление
       |ИЗ
       |	Справочник.Сервер1С КАК Сервер1С
       |ГДЕ
       |	Сервер1С.IDСервера1С = &IDСервера1С
       |	И НЕ Сервер1С.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат Истина;
		КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ПрямыеКомандыСерверу1С

#Область ПерезагрузкаСервера1С

&НаКлиенте
Процедура ПерезагрузкаСервера1С(Команда)
	
		Если ТунельSSH Тогда 
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПарольСуперПользователя) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля!", 0, "Внимание!");
				Возврат;
			КонецЕсли;
			Иначе 
		Если Не ЗначениеЗаполнено(ПарольСуперПользователя) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля!", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	ВыполнениеПерезагрузкиСервера1С();

КонецПроцедуры

&НаСервере
Процедура ВыполнениеПерезагрузкиСервера1С()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптПерезагрузкиСервера1С() + "' " + "",
			  СкриптПерезагрузкиСервера1С()); 

		СохранитьНаСерверИсходникСкрипта();
		ОбработкаСкриптПерезагрузкиСервера1С(ФайлСкрипта);

		ПолучениеСтатусСервера1С();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаСкриптПерезагрузкиСервера1С(ФайлСкрипта)

		// Формируем команды и выполняем с указанным таймаутом в секундах
		КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" + ФайлСкрипта + "'";	
		КодВозврата = Неопределено;

		ЗапуститьПриложение(КомандаЗапускаСкрипта,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +
			 КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозврата;
		КонецЕсли;

	УдалитьФайлы(ФайлСкрипта);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеСтатусаСервера1С

&НаКлиенте
Процедура ПолучитьСтатусСервера1С(Команда)

		Если ТунельSSH Тогда 
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля!", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ПолучениеСтатусСервера1С();

КонецПроцедуры

&НаСервере
Процедура ПолучениеСтатусСервера1С()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптПолученияСтатусаСервера1С() + "' " + "",
			  СкриптПолученияСтатусаСервера1С()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОстановкаСервера1С

&НаКлиенте
Процедура ОстановкаСервера1С(Команда)
	
		Если ТунельSSH Тогда 
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля!", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

			//Иначе
			//Если Не ЗначениеЗаполнено(ПарольСуперПользователя) Тогда
			//			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			//				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля!", 0, "Внимание!");
			//		Возврат;
			//	КонецЕсли;
		//КонецЕсли;
		
			//Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			//ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
			//Возврат;

	ВыполнениеОстановкиСервера1С();

КонецПроцедуры

&НаСервере
Процедура ВыполнениеОстановкиСервера1С()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'" + СкриптОстановкиСервера1С() + "' " + "",
				СкриптОстановкиСервера1С()); 

		СохранитьНаСерверИсходникСкрипта();
		ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);

		//ОбработкаСкриптаОстановкиСервера1С(ФайлСкрипта, ПарольСуперПользователя);

		//ПолучениеСтатусаСервера1С();
		//ЗапуститьСкриптПолучениеСтатусаСервера1С();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработкаСкриптаОстановкиСервера1С(ФайлСкрипта, ПарольСуперПользователя)
		// Формируем команды и выполняем с указанным таймаутом в секундах
		//КомандаЗапускаСкрипта =  "echo " + "'"+ ПарольСуперПользователя + "'"+ " | sudo -S timeout " + "30" + "s /bin/bash '" + ФайлСкрипта + "'";	
		//РезультатВыполнения = КомандаЗапускаСкрипта;
		//ЗапуститьПриложение(КомандаЗапускаСкрипта,, Истина);
		dfddf = "echo " + "'"+ ПарольСуперПользователя + "'"+ " | sudo -S service srv1cv83 stop";
		РезультатВыполнения = dfddf;		
		ЗапуститьПриложение(dfddf,, Истина);
		//УдалитьФайлы(ФайлСкрипта);
КонецПроцедуры

#КонецОбласти

#Область ЗапускСервера1С

&НаКлиенте
Процедура ЗапускСервера1С(Команда)

	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
	Возврат;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИзменитьНастройкуБлокировки

&НаКлиенте
Процедура ИзменитьНастройкуБлокировки(Команда)

			Если ТунельSSH Тогда   
				Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
					Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
					Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Или 
					Не ЗначениеЗаполнено(АдминистраторБазы1С)  Или Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
							ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			Иначе 
				Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
					Не ЗначениеЗаполнено(База1С) Или Не ЗначениеЗаполнено(АдминистраторБазы1С)  Или 
						Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
							ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			КонецЕсли;		

		ИзменениеНастройкиБлокировкиРегламентныхЗаданий();

				ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект),
				 "Блокировка регламентных заданий в базе " + База1С + ?(БлокироватРегламентныеЗаданияБазы1С,
					 " включена", " выключена") + " !", 0, "Внимание!");

КонецПроцедуры

&НаСервере 
Процедура ИзменениеНастройкиБлокировкиРегламентныхЗаданий()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
	ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптУправленияБлокировкиРегламентныхЗаданийНаСервере1С() + " ", 
	СкриптУправленияБлокировкиРегламентныхЗаданийНаСервере1С());

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);
	ПолучениеСтатусаРегламентныхЗаданий()

КонецПроцедуры

#КонецОбласти

#Область ОтключитьВсехПользователей

// Отключение всех пользователей из базы 1С
//
&НаКлиенте
Процедура ОтключитьВсехПользователей(Команда)

		Если ТунельSSH Тогда  
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		Иначе 
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(База1С) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтключениеПользователей1С", ЭтотОбъект);	
	ПоказатьВопрос(Оповещение, "Вы уверены что хотите закрыть все сессии пользователей ?", РежимДиалогаВопрос.ДаНет, 0,
	КодВозвратаДиалога.Нет, "Внимание !" );

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтключениеПользователей1С(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатВыполненияТЧ.Очистить();
		РезультатВыполнения = "";
		Элементы.СписокПользователей1С.СписокВыбора.Очистить();
		idСессииПользователя1С = "";

		ВыполнитьОтключениеВсехПользователей1С();
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Обработка по закрытию активных сессий выполнена!", 0, "Внимание!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтключениеВсехПользователей1С()

//Если СписокПользователей1С

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолучениеАктивныхСессий1С() + " ", 
				СкриптПолучениеАктивныхСессий1С()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);

		//// Конвертируем файл скрипта, удаляя все следы "Windows"
		//ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

			//Если РезультатВыполненияТЧ.Количество() = 0 Тогда 
			//	РезультатВыполнения = "Активных сессий в базе " + Символ(34) + База1С.Наименование + Символ(34) +
			//		" кластера 1С: " + idКластераСервера1С.Наименование + " не обнаружено.";
			//	Возврат;
			//КонецЕсли;

		ЗакрытиеВсехАктивныхСессий1С();


	//		ЧислоСтрок =  СтрЧислоСтрок(РезультатВыполненияСкрипта);
	//			ПредСтрокаКоманд = "";
	//				Для Индекс = 1 по ЧислоСтрок Цикл
	//					ПредСтрокаКоманд  = ПредСтрокаКоманд + СкриптУдалениеВсехАктивныхСессии1С(СтрПолучитьСтроку(РезультатВыполненияСкрипта, Индекс))
	//						+ ?(Индекс < ЧислоСтрок,"; ","");
	//				КонецЦикла;

	//	ТекстКомандыДляВыполнения = ?(ТунельSSH,  "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
	//		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "'"+ ПредСтрокаКоманд + "'", "'" + ПредСтрокаКоманд + "'");

	//			// Конвертируем файл скрипта, удаляя все следы "Windows"
	//			ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);

	//			// Формируем команды и выполняем с указанным таймаутом в секундах
	//			КомандаЗапускаСкрипта = "timeout " + "10" + "s /bin/bash '" 
	//				+ ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	
	//			КодВозвратаРезультат = Неопределено;
	//			НачатьЗапускПриложения(Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект), КомандаЗапускаСкрипта,, Истина);

	//			// Обработка результата выполнения	
	//			Если НЕ КодВозвратаРезультат = 0 Тогда
	//				РезультатВыполнения = "Исключение! Не удалось выполнить команду. " + Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозвратаРезультат;
	//					Возврат;
	//			КонецЕсли;

	//	РезультатВыполнения = "Сессии в базе " + Символ(34) + Элементы.База1С1.СписокВыбора.НайтиПоЗначению(База1С).Представление  + Символ(34) +
	//		" былы успешно закрыты из списка баз кластера 1С: " + Элементы.АдресСервераЧерезSSH.СписокВыбора.НайтиПоЗначению(АдресСервераЧерезSSH).Представление + ".";
	//КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗакрытиеВсехАктивныхСессий1С();

	ПредСтрокаКоманд = "";
	РезультатВыполнения  = ПромежуточныеПолученныеДанные;
	КоличествоСтрокРезультатВыполнения = СтрЧислоСтрок(ПромежуточныеПолученныеДанные);
		Для Индекс = 1 по КоличествоСтрокРезультатВыполнения Цикл
				СтрокаSession	= СтрПолучитьСтроку(ПромежуточныеПолученныеДанные, Индекс);
				СтрокаAppid		= СтрПолучитьСтроку(ПромежуточныеПолученныеДанные, Индекс+2);
					Если  СтрНайти(СтрокаAppid, "Designer") > 0 Тогда
						Индекс = Индекс + 2; 
						Продолжить;
					КонецЕсли;
			Индекс = Индекс + 2;
			ПредСтрокаКоманд  = ПредСтрокаКоманд + СкриптУдалениеВсехАктивныхСессии1С(Прав(СтрокаSession, СтрНайти(СтрокаSession, ":") + 2)) + ";";
				 //?((Индекс + 3) < КоличествоСтрокРезультатВыполнения,"; ","");
		КонецЦикла;
	ТекстКомандыДляВыполнения = ?(ТунельSSH,  "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
	ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + ПредСтрокаКоманд, ПредСтрокаКоманд);

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);

КонецПроцедуры

#КонецОбласти

#Область ОтключитьПользователяБазы1С

&НаКлиенте
Процедура ОтключитьПользователяБазы1С(Команда)

		Если ТунельSSH Тогда  
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(idСессииПользователя1С) Или
				Не ЗначениеЗаполнено(idКластераСервера1С) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		Иначе 
			Если 	Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
				Не ЗначениеЗаполнено(idСессииПользователя1С) Или Не ЗначениеЗаполнено(idКластераСервера1С) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОтключениеПользователя1С", ЭтотОбъект);	
	ПоказатьВопрос(Оповещение, "Вы уверены что хотите закрыть текущую сессию пользователя?", РежимДиалогаВопрос.ДаНет, 0,
	КодВозвратаДиалога.Нет, "Внимание !" );

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОтключениеПользователя1С(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		РезультатВыполненияТЧ.Очистить();
		РезультатВыполнения = "";
		Элементы.СписокПользователей1С.СписокВыбора.Удалить(Элементы.СписокПользователей1С.СписокВыбора.Индекс(
			Элементы.СписокПользователей1С.СписокВыбора.НайтиПоЗначению(idСессииПользователя1С)));
		ВыполнитьОтключениеПользователя1С();
		idСессииПользователя1С = "";

		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Обработка по закрытию активной сессии выполнена!", 0, "Внимание!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьОтключениеПользователя1С()

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
			ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптУдалениеАктивнойСессии1С() + " ", 
				СкриптУдалениеАктивнойСессии1С()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбластьПолучитьСписокАктивныхПользователей

&НаКлиенте
Процедура ПолучитьСписокАктивныхПользователей(Команда)

			Если ТунельSSH Тогда  
				Если Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
							Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
							Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Или 
							Не ЗначениеЗаполнено(idКластераСервера1С) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			Иначе 
				Если Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) Или
							 Не ЗначениеЗаполнено(База1С) Или Не ЗначениеЗаполнено(idКластераСервера1С)Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			КонецЕсли;

		ПолучениеСпискаАктивныхПользователей();

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеСпискаАктивныхПользователей()

		Элементы.СписокПользователей1С.СписокВыбора.Очистить();
		РезультатВыполненияТЧ.Очистить();
		РезультатВыполнения = "";
		ВыполнитьПолучениеСпискаАктивныхПользователей1С();
		ЗаполнитьСписокАктивныхПользоваталей1С();

		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Обработка по получению активной сессии выполнена!", 0, "Внимание!");

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПолучениеСпискаАктивныхПользователей1С()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
	ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолучениеДанныхОбАктивныхПользователяхБазы1С() + " ", 
	СкриптПолучениеДанныхОбАктивныхПользователяхБазы1С()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокАктивныхПользоваталей1С()

	Элементы.СписокПользователей1С.СписокВыбора.Очистить();
	КолСтрокТЧ = РезультатВыполненияТЧ.Количество();
		Если КолСтрокТЧ > 0 Тогда
			ИндексМассива = 0; 
			МассивПоиска = Новый Массив();
			МассивПоиска.Добавить(РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "session")));
			МассивПоиска.Добавить(РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "user-name")));
				Если МассивПоиска[0].Количество() > 0 И МассивПоиска[1].Количество() > 0 Тогда
				  КоличСтрокМассива = МассивПоиска[0].Количество() - 1;
					Пока ИндексМассива <= КоличСтрокМассива Цикл 
						Элементы.СписокПользователей1С.СписокВыбора.Добавить(МассивПоиска[0][ИндексМассива].Реквизит3,
						 	МассивПоиска[1][ИндексМассива].Реквизит3);
						Элементы.СписокПользователей1С1.СписокВыбора.Добавить(МассивПоиска[0][ИндексМассива].Реквизит3,
						 	МассивПоиска[1][ИндексМассива].Реквизит3);
						ИндексМассива = ИндексМассива + 1;
					КонецЦикла;
				КонецЕсли;
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокАктивныхПользователейБазы1СSSH()
	// Конвертируем файл скрипта, удаляя все следы "Windows"
	ПреобразоватьФайлТекстаБезBOMСимвола(ФайлСкрипта);
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура СписокПользователей1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	idСессииПользователя1С = ВыбранноеЗначение;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИЗагрузкаФайлов1С

&НаКлиенте
Процедура ВыгрузитьФайл(Команда)
	
			Если ТунельSSH Тогда  
				Если  Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
							Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(База1С) Или 
							Не ЗначениеЗаполнено(idКластераСервера1С)  Или Не ЗначениеЗаполнено(АдминистраторБазы1С)  Или
							Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С)  Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			Иначе 
				Если 	Не ЗначениеЗаполнено(База1С) Или Не ЗначениеЗаполнено(idКластераСервера1С)  Или 
							Не ЗначениеЗаполнено(АдминистраторБазы1С)  Или Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
						Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
					Возврат;
				КонецЕсли;
			КонецЕсли;

		Если АрхивироватьCFФайл Тогда 
			ВыполнитьВыгрузкуCFФайла();
		Иначе
			ВыполнитьВыгрузкуDTФайла();
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)

КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуCFФайла()

	РезультатВыполнения = "";

		ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
	ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптВыгрузкиCFФайлаБазы1C() + " ", 
	СкриптВыгрузкиCFФайлаБазы1C()); 

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина);
	РезультатВыполнения = РезультатВыполнения + Символы.ПС + ПромежуточныеПолученныеДанные;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуDTФайла()

	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ОбработкаОповещенияВыбораИзСписка(ЗначениеВыбора, ДопПараметры) Экспорт
	idКластераСервера1С = Элементы.idКластераСервера1С.СписокВыбора[0];
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформацию(Команда)

	РезультатВыполнения = "";
	
	Если ТекущийЭлемент.Имя = "ПолучитьИнформацию1" Тогда
		Если ЗначениеЗаполнено(idКластераСервера1С) Тогда 
			ОтобразитьИнформациюПоТекущемуСерверу();
		Иначе 
			РезультатВыполнения = "Не выбран сервер 1С";
		КонецЕсли;
	КонецЕсли;

		Если ТекущийЭлемент.Имя = "ПолучитьИнформацию2" Тогда
			Если ЗначениеЗаполнено(База1С) Тогда  
				ОтобразитьИнформациюПоТекущейБазе();
			Иначе 
				РезультатВыполнения = "Не выбран База 1С";
			КонецЕсли;
		КонецЕсли;

	Если ТекущийЭлемент.Имя = "ПолучитьИнформацию3" Тогда
		Если ЗначениеЗаполнено(СписокПользователей1С) Тогда  
			ОтобразитьИнформациюПоТекущемуПользователю();
		Иначе 
			РезультатВыполнения = "Не выбран Пользователь 1С";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьФизическийСервер(Команда)
	
КонецПроцедуры

#Область LinuxDEB

&НаКлиенте
Процедура ПолучитьСписокЗапущенныхСервисов(Команда)

	Если ТунельSSH Тогда   
		Если 	Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
			Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	ПолучитьСписокВсехЗапущенныхСервисовLinux();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокВсехЗапущенныхСервисовLinux()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияВсехЗапущенныхСервисовUbuntu() + " ", 
			СкриптПолученияВсехЗапущенныхСервисовUbuntu());

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(,, Истина);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	 //для веб-клиента требуется дополнительно подключение расширения работы с файлами
	 #Если ВебКлиент Тогда
	 //Результат = ПодключитьРасширениеРаботыСФайлами();
		//ОбратныйВызов = Новый ОписаниеОповещения("РасширениеПодключено", ЭтотОбъект);
		//НачатьПодключениеРасширенияРаботыСФайлами(ОбратныйВызов);

			 //если подключить не удалось - требуется установить его (в первый раз)
			 //Если не Результат Тогда
			      //устанавливаем
					//Оповещение = Новый ОписаниеОповещения("УстановитьИПродолжитьЗавершение", ЭтаФорма);
					//НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
			      //если не удалось установить - то повторный вызов подключения будет неудачный
			 //     Если не ПодключитьРасширениеРаботыСФайлами() Тогда
			 //          //сообщаем об ошибке и прерываем работу программы
			 //          ВызватьИсключение "Ошибка. Ваш браузер не поддерживает работу с файлами.";
			 //     КонецЕсли;
			 //КонецЕсли;
	#Иначе 
			//ПолучитьПутьВременногоКаталога();
	 #КонецЕсли

//В мобильном приложении (клиент)
//Для включения возможности использования процедур и функций в мобильном
// приложении на стороне клиента применяется инструкция препроцессора
// МобильноеПриложениеКлиент. Директива действует независимо от Клиент,
// то есть код одновременно и Клиент и МобильноеПриложениеКлиент.
   #Если МобильноеПриложениеКлиент Тогда
		РезультатВыполнения = "МобильноеПриложениеКлиент 2";
   #КонецЕсли

//В мобильном приложении (сервер)
//Для включения возможности использования процедур и функций в мобильном приложении 
//на стороне сервера применяется инструкция препроцессора МобильноеПриложениеСервер. 
//Директива действует независимо от Сервер, то есть код одновременно и 
//Сервер и МобильноеПриложениеСервер.
   #Если МобильноеПриложениеСервер Тогда
  // …
   #КонецЕсли

//В мобильном клиенте
//В мобильном клиенте не определена директива МобильноеПриложениеКлиент. 
//Для включения возможности использования процедур и функций в мобильном 
//клиенте применяется инструкция препроцессора МобильныйКлиент.

//Если конфигурация разрабатывается для работы на персональном компьютере и на мобильном устройстве,
// то, для работы методов, доступных на мобильном приложении следует использовать обе инструкции:
// МобильноеПриложениеКлиент и МобильныйКлиент.

//Точечная модификация метода в расширении (с аннотацией &ИзменениеИКонтроль)
//В текст расширяемого метода можно внести точечные изменения.
// Для этого метод должен быть скопирован в расширение с аннотацией 
//&ИзменениеИКонтроль. 
//С помощью инструкций 
//#Вставить 
//… 
//#КонецВставить 
//и 
//#Удалить 
//… 
//#КонецУдалить 
//отмечаются фрагменты текста, 
//которые необходимо добавить в расширяемый модуль и,
//соответственно, удалить из него.

КонецПроцедуры

&НаКлиенте
Процедура РасширениеПодключено(Подключено, ДополнительныеПараметры) Экспорт
 
	 Если НЕ Подключено Тогда
		//НачатьУстановкуРасширенияРаботыСФайлами(Неопределено);
			Оповещение = Новый ОписаниеОповещения("УстановитьИПродолжитьЗавершение", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
		Иначе 
			ОбратныйВызов = Новый ОписаниеОповещения("ПолучитьКаталогВременныхФайловЗавершение", ЭтотОбъект, , "ФайловаяОшибка", ЭтотОбъект);
			НачатьПолучениеКаталогаВременныхФайлов(ОбратныйВызов);
	 КонецЕсли;
 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИПродолжитьЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИПродолжитьПослеПодключенияРасширения", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИПродолжитьПослеПодключенияРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Результат = "РасширениеПодключено";
	Иначе
		Результат = "ПродолжитьБезУстановки";
	КонецЕсли;

	ОбратныйВызов = Новый ОписаниеОповещения("ПолучитьКаталогВременныхФайловЗавершение", ЭтотОбъект, , "ФайловаяОшибка", ЭтотОбъект);
	НачатьПолучениеКаталогаВременныхФайлов(ОбратныйВызов);

	Закрыть(Результат);
	
КонецПроцедуры

#Область ОтправкаПисьмаПолучателям

&НаКлиенте
Процедура ОтправитьПисьмоУведомление(Команда)
	Если ОтправкаПисьмаУведомленияПользователям() Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Электронное письмо отправлено успешно!", 0, "Внимание!");	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресАдресТехЭлПочты()
	Возврат Константы.АдресТехЭлПочты.Получить()
КонецФункции

&НаСервере 
Функция ОтправкаПисьмаУведомленияПользователям()

//server: smtp.yandex.ru
//  port: 465
//  use_tls: false
//  use_ssl: true
//  username: noreply@najet.ru
//  password: EreH7kGa

АдресТехЭлПочты = ПолучитьАдресАдресТехЭлПочты();

	//Создаем профиль либо считываем из справочника
		Профиль = Новый ИнтернетПочтовыйПрофиль;
			Профиль.АдресСервераSMTP =	"smtp.yandex.ru";
			Профиль.ПортSMTP = 465;
			Профиль.Пользователь = АдресТехЭлПочты;
			Профиль.Пароль = "EreH7kGa";
			Профиль.ПользовательSMTP = АдресТехЭлПочты; 
			Профиль.ПарольSMTP = "EreH7kGa";
			Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
			Профиль.ТолькоЗащищеннаяАутентификацияSMTP = Истина;
			Профиль.ИспользоватьSSLSMTP = Истина;
			Профиль.Таймаут = 35; 

		//Создаем письмо
		Почта = Новый ИнтернетПочта;
			Письмо = Новый ИнтернетПочтовоеСообщение;
			 ОкончТелоПисьмаПростойТекст = Символы.ПС + Символы.ПС +
						"База 1С: " + База + Символы.ПС +
						"Ссылка: " + База.ЭлАдресБазы + Символы.ПС +
						"Администратор БД: " + База.логинАдминистраторБД + Символы.ПС +
						"пас: " +  База.парольАдминистратораБД + Символы.ПС +
						"Администратора АК: " + База.логинАдминистратораАК + Символы.ПС +
						"пас: " + База.ПарольАдминистратораАК + Символы.ПС + Символы.ПС +
						?(ЗначениеЗаполнено(База.ЭлАдресБилетногоМодуля), "Билетный модуль:" + Символы.ПС +
						"Ссылка: " + База.ЭлАдресБилетногоМодуля + Символы.ПС +
						"Администратора билетного модуля: " + База.логинАдминистратораБилетногоМодуля + Символы.ПС +
						"пас: " + База.ПарольАдминистратораБилетногоМодуля + Символы.ПС + Символы.ПС +
						"Связь 1С с Билетным модулем:" + Символы.ПС +
 						"логин: " + База.ЛогинСвязь1ССБилетнымМодулем + Символы.ПС + 
						"пас: " + База.ПарольСвязь1ССБилетнымМодулем + Символы.ПС + Символы.ПС, "") +

						?(ЗначениеЗаполнено(База.БронированиеСайт),
						"Бронирование: " + Символы.ПС +
						"Ссылка: " + База.БронированиеСайт + Символы.ПС +
						"логин: " + База.ЛогинБронированиеСайт + Символы.ПС +
						"пас: " + База.ПарольБронированиеСайт + Символы.ПС + Символы.ПС, "");

										ОкончТелоПисьма =  "
										|<br /><br /><br /><h3>База 1С: " + База + " </h3>
										|Ссылка: "  +  База.ЭлАдресБазы + "<br />
										|Администратор БД: " + База.логинАдминистраторБД  + " <br  />
										|пас: " +  База.парольАдминистратораБД + " <br  />
										|Администратора АК: " + База.логинАдминистратораАК + " <br  />
										|пас: " + База.ПарольАдминистратораАК + " <br  /><br  />
										|";

										ОкончТелоПисьма = ?(ЗначениеЗаполнено(База.ЭлАдресБилетногоМодуля), ОкончТелоПисьма  + "
										|</h3>Билетный модуль: </h3>
										|Ссылка: "  +  База.ЭлАдресБилетногоМодуля + "<br />
										|Администратора билетного модуля: " + База.логинАдминистратораБилетногоМодуля  + " <br  />
										|пас: " +  База.ПарольАдминистратораБилетногоМодуля + " <br  /><br  />
										|
										|</h2>Связь 1С с Билетным модулем: </h2><br  />
										|логин: " + База.ЛогинСвязь1ССБилетнымМодулем + " <br  />
										|пас: " + База.ПарольСвязь1ССБилетнымМодулем  + " <br  /><br  />
										|","");

										ОкончТелоПисьма = ?(ЗначениеЗаполнено(База.БронированиеСайт), ОкончТелоПисьма  + "
										|</h3>Бронирование: </h3>
										|Ссылка: "  +  База.БронированиеСайт + "<br />
										|логин: " + База.ЛогинБронированиеСайт  + " <br  />
										|пас: " +  База.ПарольБронированиеСайт + " <br  /><br  />
										|", "");

				Текст = Письмо.Тексты;
					Текст.Добавить("123").ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст; //ОкончТелоПисьма); //ОкончТелоПисьмаПростойТекст);//
					Текст.Добавить("321").ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
					Текст.Добавить("567").ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
				//Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML; //  .ПростойТекст;
			Письмо.Тема = "NAJET. Развернута и доступна новая база 1С " + Символ(31) + База + Символ(31);
			Письмо.Отправитель = АдресТехЭлПочты;
			Письмо.ИмяОтправителя = Лев(АдресТехЭлПочты, Найти(АдресТехЭлПочты, "@")-1);

				Для Каждого СтрокаТЧ Из СписокПолучателейПисьма Цикл
					Письмо.Получатели.Добавить(СтрокаТЧ.НаименованиеПолучателя.email);
				КонецЦикла;

		//Подключиться к ящику 
		Попытка
			Почта.Подключиться(Профиль);		 
			РезультатВыполнения = РезультатВыполнения +  Символы.ПС + "Соединение с почтовым сервером завершено успешно!";
		Исключение
			РезультатВыполнения = РезультатВыполнения +  Символы.ПС + "Ошибка подключения к электронному ящику";
			Возврат Ложь;
		КонецПопытки;

		//Отправляем письмо
		Попытка
			 Почта.Послать(Письмо);	 	  
				РезультатВыполнения = РезультатВыполнения +  Символы.ПС + "Электронное письмо отправлено успешно";
		Исключение
			РезультатВыполнения = РезультатВыполнения +  Символы.ПС + "Ошибка отправки электронного письма";
			Возврат Ложь;
		КонецПопытки;

		//Закрываем письмо
		Почта.Отключиться();
		//Закрываем файл вложения
		Письмо.Вложения.Очистить();

		Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЭлАдресТехническойПочты(Команда)
	ОткрытьФорму("Константа.АдресТехЭлПочты.ФормаКонстант",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаПриИзменении(Элемент)
	
	Если СписокПолучателейПисьма.Количество() > 1 И ЗначениеЗаполнено(Элемент.ТекущиеДанные.НаименованиеПолучателя) Тогда 
		МассивОдинаковыхСтрок = СписокПолучателейПисьма.НайтиСтроки(
			Новый Структура("НаименованиеПолучателя", Элемент.ТекущиеДанные.НаименованиеПолучателя)); 
				Если МассивОдинаковыхСтрок.Количество() > 1 Тогда
					МассивОдинаковыхСтрок.Удалить(1); 
					Элемент.ТекущиеДанные.НаименованиеПолучателя = ПредопределенноеЗначение("Справочник.ПолучательПисьма.ПустаяСсылка");
						МассивПустыхСтрок = СписокПолучателейПисьма.НайтиСтроки(
							Новый Структура("НаименованиеПолучателя", ПредопределенноеЗначение("Справочник.ПолучательПисьма.ПустаяСсылка"))); 
								Если МассивПустыхСтрок.Количество() > 0 Тогда
									Для каждого Строка Из МассивПустыхСтрок Цикл 
										СписокПолучателейПисьма.Удалить(Строка); 
									КонецЦикла;
								КонецЕсли;
						Возврат;
				КонецЕсли;
	КонецЕсли;

		Если Элемент.ТекущиеДанные <> Неопределено Тогда 
			Элемент.ТекущиеДанные.ЭлАдресПолучателя = ЗаполнитьПолеЭлПисьма(Элемент.ТекущиеДанные.НаименованиеПолучателя);
		КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	МассивПустыхСтрок = СписокПолучателейПисьма.НайтиСтроки(
		Новый Структура("НаименованиеПолучателя", ПредопределенноеЗначение("Справочник.ПолучательПисьма.ПустаяСсылка"))); 
			Если МассивПустыхСтрок.Количество() > 0 Тогда
				Для каждого Строка Из МассивПустыхСтрок Цикл 
					СписокПолучателейПисьма.Удалить(Строка); 
				КонецЦикла;
			КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПолеЭлПисьма(НаименованиеПолучателя)
	Возврат НаименованиеПолучателя.Ссылка.email;
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////   Docker    ///////////////////////////////////////////
#Область КомандыDocker

#Область СписокКонтейнеров

&НаКлиенте
Процедура ПолучитьСписокКонтейнеровDocker(Команда)

		Если ТунельSSH Тогда   
			Если 	Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ПолучитьСписокКонтейнеровDockerПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокКонтейнеровDockerПродолжение()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияСпискаКонтейнеровDocker() + " ", 
			СкриптПолученияСпискаКонтейнеровDocker());

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(, Истина,, Истина);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОстановитьКонтейнерDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонтейнерDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтейнерDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьКонтейнерDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура СтатусКонтейнераDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьCервисDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура СтатусСервисаDocker(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	ПоказатьПредупреждение(Оповещение, "Данная команда находиться в разработке!", 0, "Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтDocker(Команда)
	ПерейтиПоНавигационнойСсылке("https://www.docker.com/")
КонецПроцедуры

&НаКлиенте
Процедура КомандыDockerСайт(Команда)
	//10 команд для Docker
	ПерейтиПоНавигационнойСсылке("https://tproger.ru/translations/top-10-docker-commands/")
КонецПроцедуры

&НаКлиенте
Процедура КомандыDockerСайт2(Команда)
	//Шпаргалка с командами Docker
	ПерейтиПоНавигационнойСсылке("https://habr.com/ru/company/flant/blog/336654/");
КонецПроцедуры

&НаКлиенте
Процедура КомандыDockerСайт3(Команда)
	// docker docs
	ПерейтиПоНавигационнойСсылке("https://docs.docker.com/engine/reference/run/");
КонецПроцедуры

&НаКлиенте
Процедура HelpDocker(Команда)
	ОткрытьФорму("ОбщаяФорма.ФормаHelpDocker",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОткрытьВОтдельномОкне(Команда)

	ОткрытьФорму("ОбщаяФорма.ФормаРезультатВыполнения", Новый Структура("ТекстРезультатВыполнения", РезультатВыполнения),,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ОбластьПолучитьСтатусРегламентныхЗаданий

&НаКлиенте
Процедура ПолучитьСтатусРегламентныхЗаданий(Команда)
	
	Если ТунельSSH Тогда 
		Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
			Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Или Не ЗначениеЗаполнено(idКластераСервера1С) 
			Или Не ЗначениеЗаполнено(АдминистраторСервера1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) 
			Или Не ЗначениеЗаполнено(База1С)   Или Не ЗначениеЗаполнено(АдминистраторБазы1С) Или
			Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	Иначе 
		Если Не ЗначениеЗаполнено(idКластераСервера1С) Или Не ЗначениеЗаполнено(АдминистраторСервера1С) 
			Или Не ЗначениеЗаполнено(ПарольАдминистратораСервера1С) 	Или Не ЗначениеЗаполнено(База1С)
			Или Не ЗначениеЗаполнено(АдминистраторБазы1С) Или Не ЗначениеЗаполнено(ПарольАдминистратораБазы1С) Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПолучениеСтатусаРегламентныхЗаданий();

КонецПроцедуры

&НаСервере
Процедура ПолучениеСтатусаРегламентныхЗаданий()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияНастройкиРегламентныхЗаданийТекущейБазы1С() + " ", 
			СкриптПолученияНастройкиРегламентныхЗаданийТекущейБазы1С()); 

	РезультатВыполненияТЧ.Очистить();
	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(Истина,,, Истина);

	Если РезультатВыполненияТЧ.Количество() > 0 Тогда 
		РезультатНастройки = РезультатВыполненияТЧ.НайтиСтроки(Новый Структура("Реквизит1", "scheduled-jobs-deny")); 
			Если РезультатНастройки.Количество() > 0 Тогда
				БлокироватРегламентныеЗаданияБазы1С = ?(РезультатНастройки[0].Реквизит3 = "off", Ложь, Истина);
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбщиеСервисныеПроцедурыФункции

&НаСервере
Процедура СохранитьНаСерверИсходникСкрипта()

		ИмяФайла = Строка(Новый УникальныйИдентификатор);
		ФайлСкрипта = КаталогВременныхФайлов() +  ИмяФайла + "." + "sh";

		ЗагружаемыйФайл = Новый ТекстовыйДокумент;
			ЗагружаемыйФайл.ДобавитьСтроку("#!/bin/sh");
			ЗагружаемыйФайл.ДобавитьСтроку("");
			ЗагружаемыйФайл.ДобавитьСтроку(ТекстКомандыДляВыполнения);
			ЗагружаемыйФайл.ДобавитьСтроку("");
			ЗагружаемыйФайл.Записать(ФайлСкрипта, КодировкаТекста.UTF8, Символ(10));

КонецПроцедуры

&НаСервере
Процедура ПолучитьСистемнуюИнформацию()

	ИнформацияЗаполнения = "";
	СистемнаяИнфо = Новый СистемнаяИнформация;
		ИнформацияЗаполнения = " ОС: " + СистемнаяИнфо.ТипПлатформы + "; IP Adress: " + ПолучениеТекущегоИПАдреса() + 
		  " (" + ПолучениеИмяТекущегоСервера() + ")" + "; Процессор: " + СистемнаяИнфо.Процессор + 
			"; Оперативная память: " + СистемнаяИнфо.ОперативнаяПамять + ";"; 

КонецПроцедуры

&НаСервере
Функция ПолучениеТекущегоИПАдреса() 
		
	ТекстКомандыПолученияИП = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "wget -qO- eth0.me" + " ", "wget -qO- eth0.me");

		ПолучениеИмениВременногоФайла();

		 //Формируем команды и выполняем с указанным таймаутом в секундах
		 ТекстКоманды = ТекстКомандыПолученияИП + " >> '" + ФайлРезультатСкрипта + "'";	

		КодВозврата = Неопределено;
		ЗапуститьПриложение(ТекстКоманды,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			Возврат "";
		КонецЕсли;

	Текст = Новый ЧтениеТекста(ФайлРезультатСкрипта, КодировкаТекста.UTF8, Символ(10));
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ФайлРезультатСкрипта);

		ТекстКомандыПолученияИП = "";
		
		Стр = СтрЗаменить(Стр, Символы.ПС,"");
		Стр = СтрЗаменить(Стр, Символы.ВК,"");

	Возврат Стр;

КонецФункции

&НаСервере
Функция ПолучениеИмяТекущегоСервера() 
		
	ТекстКомандыПолученияИмениСервера = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "uname -n" + " ", "uname -n");

		ПолучениеИмениВременногоФайла();

		 //Формируем команды и выполняем с указанным таймаутом в секундах
		 ТекстКоманды = ТекстКомандыПолученияИмениСервера + " >> '" + ФайлРезультатСкрипта + "'";	

		КодВозврата = Неопределено;
		ЗапуститьПриложение(ТекстКоманды,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			Возврат "";
		КонецЕсли;

	Текст = Новый ЧтениеТекста(ФайлРезультатСкрипта, КодировкаТекста.UTF8, Символ(10));
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ФайлРезультатСкрипта);

		ТекстКомандыПолученияИмениСервера = "";
	
		Стр = СтрЗаменить(Стр, Символы.ПС, "");
		Стр = СтрЗаменить(Стр, Символы.ВК, "");

	Возврат Стр;

КонецФункции

&НаСервере
Процедура ПолучениеДанныхССервераПослеОбработкиСкрипта(Скрипт1С = Ложь, СкриптDocker = Ложь, 
	СкриптUbuntu = Ложь, ОтображатьТЧ = Ложь, ПрямаяКоманда = Ложь, ОтображатьЗапрос = Ложь)
	
	ПолучитьСистемнуюИнформацию();

	РезультатВыполнения = "";
	АдресДокументаВХранилище = ?(ПрямаяКоманда, ОбработкаКоманды(), ОбработкаФайла(ФайлСкрипта));

	Если ЭтоАдресВременногоХранилища(АдресДокументаВХранилище) Тогда
		 ПолученныеДанныеСтрока = ПолучитьИзВременногоХранилища(АдресДокументаВХранилище);
	Иначе
			Если ОтображатьЗапрос Тогда 
				РезультатВыполнения = РезультатВыполнения + Символы.ПС + "Не получены данные после обработки !";
			КонецЕсли;
		Возврат;
	КонецЕсли;

	УдалитьИзВременногоХранилища(АдресДокументаВХранилище);
	РезультатВыполненияТЧ.Очистить();

	// чтение
	Если ОтображатьТЧ Тогда 
		Если Скрипт1С Тогда 
			Разделитель = ":";
			ЗагружаемыйФайл = Новый ТекстовыйДокумент;
			ЗагружаемыйФайл.ДобавитьСтроку(ПолученныеДанныеСтрока);
			Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
				СтрокаТЧ = РезультатВыполненияТЧ.Добавить();
				Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
				ТекущСтрока = СтрЗаменить(Строка, Разделитель, Символы.ПС);
				СтрокаТЧ.Реквизит1 = ?(ЗначениеЗаполнено(СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 1))), 
					СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 1)), "-");
				СтрокаТЧ.Реквизит2 = Разделитель;
				СтрокаТЧ.Реквизит3 = СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 2));
			КонецЦикла;
		КонецЕсли;
		
		Если СкриптDocker Тогда 
			Разделитель = "   ";
			ЗагружаемыйФайл = Новый ТекстовыйДокумент;
			ЗагружаемыйФайл.ДобавитьСтроку(ПолученныеДанныеСтрока);
			Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
				СтрокаТЧ = РезультатВыполненияТЧ.Добавить();
				Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
				ТекущСтрока = СтрЗаменить(Строка, Разделитель, Символы.ПС);
				СтрокаТЧ.Реквизит1 = СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 1));
				СтрокаТЧ.Реквизит2 = Разделитель;
				СтрокаТЧ.Реквизит3 = СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 2));

				ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит1.Имя = "1";
				ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит2.Имя = "2";
				ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит3.Имя = "3";
			КонецЦикла;
		КонецЕсли;

		Если СкриптUbuntu Тогда
 			РезультатВыполнения = ПолученныеДанныеСтрока;

			//Разделитель = "   ";
			//ЗагружаемыйФайл = Новый ТекстовыйДокумент;
			//ЗагружаемыйФайл.ДобавитьСтроку(ПолученныеДанныеСтрока);
			//Для НомерСтроки = 1 по ЗагружаемыйФайл.КоличествоСтрок() Цикл
			//	СтрокаТЧ = РезультатВыполненияТЧ.Добавить();
			//	Строка = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
			//	ТекущСтрока = СтрЗаменить(Строка, Разделитель, Символы.ПС);
			//	СтрокаТЧ.Реквизит1 = СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 1));
			//	СтрокаТЧ.Реквизит2 = Разделитель;
			//	СтрокаТЧ.Реквизит3 = СокрЛП(СтрПолучитьСтроку(ТекущСтрока, 2));

			//	ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит1.Имя = "1";
			//	ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит2.Имя = "2";
			//	ЭтаФорма.Элементы.РезультатВыполненияТЧРеквизит3.Имя = "3";
			//КонецЦикла;
		КонецЕсли;

		Если РезультатВыполненияТЧ.Количество() > 0 Тогда 
			ОчиститьТЧРезультатВыполнения(Новый Структура("Реквизит1", ""));
		КонецЕсли;

		Если РезультатВыполненияТЧ.Количество() > 2
			И РезультатВыполненияТЧ.Получить(РезультатВыполненияТЧ.Количество() - 1).Реквизит1 = "-" Тогда 
			РезультатВыполненияТЧ.Удалить(РезультатВыполненияТЧ.Количество() - 1); 
		КонецЕсли;
		
	    Отбор = Новый Структура;
	    Отбор.Вставить("Реквизит1", "-");
	    Строки = РезультатВыполненияТЧ.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				РезультатВыполненияТЧ.Удалить(РезультатВыполненияТЧ.Количество() - 1);
			КонецЕсли;
	Иначе 
		РезультатВыполнения = ПолученныеДанныеСтрока;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТЧРезультатВыполнения(СтруктураУсловия)

	МассивПустыхСтрок = РезультатВыполненияТЧ.НайтиСтроки(СтруктураУсловия); 
	Если МассивПустыхСтрок.Количество() > 0 Тогда
		Для каждого Строка Из МассивПустыхСтрок Цикл 
			РезультатВыполненияТЧ.Удалить(Строка); 
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбработкаФайла(ФайлСкрипта)

		ПолучениеИмениВременногоФайла();

		 //Формируем команды и выполняем с указанным таймаутом в секундах
		 КомандаЗапускаСкрипта = "timeout 10s /bin/bash '" + ФайлСкрипта + "' >> '" + ФайлРезультатСкрипта + "'";	

		КодВозврата = Неопределено;
		ЗапуститьПриложение(КомандаЗапускаСкрипта,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			РезультатВыполнения = РезультатВыполнения + Символы.ПС + " Исключение! Не удалось выполнить команду. " + 
				Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозврата + Символы.ПС + ТекстКомандыДляВыполнения;
				Возврат Неопределено;
		КонецЕсли;

				Текст = Новый ЧтениеТекста(ФайлРезультатСкрипта, КодировкаТекста.UTF8, Символ(10));
				Стр = Текст.Прочитать();
				Текст.Закрыть();
				ФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(Стр); 

					УдалитьФайлы(ФайлРезультатСкрипта);
					УдалитьФайлы(ФайлСкрипта);

	Возврат ФайлВоВременномХранилище;

КонецФункции

&НаСервере
Функция ОбработкаКоманды()

		ПолучениеИмениВременногоФайла();

		 //Формируем команды и выполняем с указанным таймаутом в секундах
		 ТекстКоманды = ТекстПрямойКоманды + " >> '" + ФайлРезультатСкрипта + "'";	

		КодВозврата = Неопределено;
		ЗапуститьПриложение(ТекстКоманды,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			РезультатВыполнения = РезультатВыполнения + Символы.ПС + " Исключение! Не удалось выполнить команду. " + 
				Символы.ПС +  ТекстКоманды +  Символы.ПС  + "Код возврата: " + КодВозврата;
				Возврат Неопределено;
		КонецЕсли;

	Текст = Новый ЧтениеТекста(ФайлРезультатСкрипта, КодировкаТекста.UTF8, Символ(10));
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	ФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(Стр); 

	УдалитьФайлы(ФайлРезультатСкрипта);

	Возврат ФайлВоВременномХранилище;

КонецФункции

&НаСервере
Процедура ПолучениеИмениВременногоФайла(ИзменитьПрава = Ложь)

	ИмяФайла = Строка(Новый УникальныйИдентификатор);
	ФайлРезультатСкрипта = КаталогВременныхФайлов() +  ИмяФайла + "." + "log";
	
	Если ИзменитьПрава Тогда 
		//Попытка
		//	//Если пароля нет то выводить предупреждение 
		//	ЗапуститьПриложение("echo " + "'"+ ПарольСуперПользователя + "'" + " | sudo -S chmod 667 '" + ФайлРезультатСкрипта + "'");	
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
	КонецЕсли;

	Если ИзменитьПрава Тогда 
		КомандаЗапускаСкрипта = "";
		 //Формируем команды и выполняем с указанным таймаутом в секундах
		 КомандаЗапускаСкрипта = "echo " + "'"+ ПарольСуперПользователя + "'" +
				 " | sudo -S chmod 667 '" + ФайлРезультатСкрипта + "'";	

		КодВозврата = Неопределено;
		ЗапуститьПриложение(КомандаЗапускаСкрипта,, Истина, КодВозврата);

		// Обработка результата выполнения	
		Если НЕ КодВозврата = 0 Тогда
			РезультатВыполнения = РезультатВыполнения + Символы.ПС + " Исключение! Не удалось выполнить команду. " + 
				Символы.ПС +  КомандаЗапускаСкрипта +  Символы.ПС  + "Код возврата: " + КодВозврата;
				Возврат;
		КонецЕсли;
	
		КомандаЗапускаСкрипта = "";
	КонецЕсли;

КонецПроцедуры


//	ТекстКомандыПолученияИП = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
//		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "wget -qO- eth0.me" + " ", "wget -qO- eth0.me");	

//		ПолучениеИмениВременногоФайла();

//		 //Формируем команды и выполняем с указанным таймаутом в секундах
//		 ТекстКоманды = ТекстКомандыПолученияИП + " >> '" + ФайлРезультатСкрипта + "'";	

//		КодВозврата = Неопределено;
//		ЗапуститьПриложение(ТекстКоманды,, Истина, КодВозврата);

//		// Обработка результата выполнения	
//		Если НЕ КодВозврата = 0 Тогда
//			Возврат "";
//		КонецЕсли;

//	Текст = Новый ЧтениеТекста(ФайлРезультатСкрипта, КодировкаТекста.UTF8, Символ(10));
//	Стр = Текст.Прочитать();
//	Текст.Закрыть();
//	
//	УдалитьФайлы(ФайлРезультатСкрипта);

//		ТекстКомандыПолученияИП = "";
//	
//	Возврат Стр;
//	
//КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////////////////////////  Linux DEB  ////////////////////////////////////////////////////////////////////////////////

//СкриптПроверкиСуществованияПапкиНаСервере(ЗаписьТекста, ФайлСкрипта)

	//Если ВаринатВзаимодействияUbuntu = "Место на дисках" Тогда
	//		Если ТунельSSH Тогда   
	//			Если 	Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
	//				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
	//					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
	//						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
	//				Возврат;
	//			КонецЕсли;
	//		КонецЕсли;		
	//	ПолучитьМестоНаДискахUbuntu();
	//КонецЕсли;

#Область LinuxUbunru

&НаКлиенте
Процедура ПроверкаСвязи(Команда)
	ПроверкаСвязиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверкаСвязиНаСервере()

КонецПроцедуры

&НаКлиенте
Процедура СкоростьСоединения(Команда)
	СкоростьСоединенияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкоростьСоединенияНаСервере()

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УдалитьФайл(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОФайле(Команда)
	
КонецПроцедуры

#Область ОбщиеСсылкиНаСайты

#Область СсылкиНаСайты1С

&НаКлиенте
Процедура ОткрытьСайтИТС(Команда)
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/")
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт1(Команда)
	ПерейтиПоНавигационнойСсылке("https://its.1c.ru/")
КонецПроцедуры

#КонецОбласти

#Область СсылкиНаСайтыBASH

&НаКлиенте
Процедура СсылкаНаСайт2(Команда)
	//Оболочка Bash — шпаргалка
	ПерейтиПоНавигационнойСсылке("https://tproger.ru/translations/bash-cheatsheet/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт3(Команда)
	//Bash-скрипты, часть 6: функции и разработка библиотек
	ПерейтиПоНавигационнойСсылке("https://habr.com/ru/company/ruvds/blog/327248/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт4(Команда)
	//Bash-скрипты, руководство в 11 частях
	ПерейтиПоНавигационнойСсылке("http://ruvds.com/doc/bash.pdf");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт5(Команда)
	//Advanced Bash-Scripting Guide: Искусство программирования на языке сценариев командной оболочки
	//Назад	Глава 12. Внешние команды, программы и утилиты	Вперед
	//12.4. Команды обработки текста
	ПерейтиПоНавигационнойСсылке("https://www.opennet.ru/docs/RUS/bash_scripting_guide/x7050.html");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт6(Команда)
	//Advanced Bash-Scripting Guide
	//Искусство программирования на языке сценариев командной оболочки
	//Автор: Mendel Cooper
	//<thegrendel@theriver.com>
	//Перевод: Андрей Киселев
	ПерейтиПоНавигационнойСсылке("/https://www.opennet.ru/docs/RUS/bash_scripting_guide/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт7(Команда)
	//читать файл построчно в Bash
	ПерейтиПоНавигационнойСсылке("https://andreyex.ru/operacionnaya-sistema-linux/kak-chitat-fajl-postrochno-v-bash/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт8(Команда)
	//Bash-скрипты, часть 2: циклы
	ПерейтиПоНавигационнойСсылке("https://habr.com/ru/company/ruvds/blog/325928/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт9(Команда)
	//Bash-скрипты, часть 8: язык обработки данных awk
	ПерейтиПоНавигационнойСсылке("https://habr.com/ru/company/ruvds/blog/327754/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт10(Команда)
	//Как построчно вывести строки файла при помощи цикла while BASH
	//Чтение файла при помощи цикла while. Передайте входным параметром файл (вместе с путём до файла).
	ПерейтиПоНавигационнойСсылке("http://trainingweb.ru/page/line-by-line-pull-strings-file-using-while-cycle-bash");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт11(Команда)
	//Advanced Bash-Scripting Guide
	//Искусство программирования на языке сценариев командной оболочки
	ПерейтиПоНавигационнойСсылке("https://se.ifmo.ru/~ad/Documentation/ABS_Guide_ru.html#MOREADV");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт12(Команда)
	//Advanced Bash-Scripting Guide
	//Искусство программирования на языке сценариев командной оболочки
	ПерейтиПоНавигационнойСсылке("http://rus-linux.net/MyLDP/BOOKS/abs-guide/flat/abs-book.html#SPECIAL-CHARS");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт13(Команда)
	//Bash: Построчное Чтение Файла — While Read Line Цикл
	ПерейтиПоНавигационнойСсылке("https://www.shellhacks.com/ru/bash-read-file-line-by-line-while-read-line-loop/");
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайт14(Команда)
	// Вставить содержимое обработчика.
ПерейтиПоНавигационнойСсылке("https://its.1c.ru/")
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМестоНаДискахСервера(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСервере(Команда)

		Если ТунельSSH Тогда   
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ВыполнитьКомандуПолученияИнформацииОСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПолученияИнформацииОСервере()

	ТекстПрямойКоманды = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + "hostnamectl" + " ", "hostnamectl");

	ПолучениеДанныхССервераПослеОбработкиСкрипта(,,,, Истина);

	ТекстПрямойКоманды = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВОтдельномОкнеТЧ(Команда)
	
КонецПроцедуры

#КонецОбласти

#Область СсылкиНаLinuxUbuntu

//Полезные команды Linux
//https://tproger.ru/articles/cool-linux-commands/

//commandlinefu.com is the place to record those command-line gems that you return to again and again.
// That way others can gain from your CLI wisdom and you from theirs too.
// All commands can be commented on, discussed and voted up or down.
//https://www.commandlinefu.com/commands/browse

//The Developer Cheat Sheet Compilation
//http://www.fuzzyopinions.com/article/technology/the-developer-cheat-sheet-compilation/

//Quite Possibly the Web's Best News
//http://www.fuzzyopinions.com/

//https://help.ubuntu.ru/wiki/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE_%D0%BF%D0%BE_ubuntu_server/%D0%B1%D0%B5%D0%B7%D0%BE%D0%BF%D0%B0%D1%81%D0%BD%D0%BE%D1%81%D1%82%D1%8C/firewall
//Firewall

//https://1cloud.ru/help/security/ispolzovanie-utility-ufw-na-inux
//Использование утилиты UFW на Linux

//Команда Sed в Linux, вывод текста, удаление, замена.
//https://itproffi.ru/komanda-sed-v-linux-vyvod-teksta-udalenie-zamena/

//Смена порта SSH-сервера как мера защиты от брутфорса
//https://putty.org.ru/articles/change-default-sshd-port.html

//https://losst.ru/otkrytye-porty-ubuntu
//ОТКРЫТЫЕ ПОРТЫ UBUNTU

//Подключение к SSH на нестандартном порту
//https://yvision.kz/post/81000

//10 Примеров: Копирование файлов через SSH
//https://www.shellhacks.com/ru/copy-files-ssh-10-examples/

//Автоматический ввод пароля SSH с помощью скрипта
//https://qastack.ru/programming/12202587/automatically-enter-ssh-password-with-script

//Смена порта SSH-сервера как мера защиты от брутфорса
//https://putty.org.ru/articles/change-default-sshd-port.html

//Копирование файлов по SSH
//http://hutpu4.net/linux-open-source/kopirovanie-fajlov-po-ssh.html

//Sshpass – вопросы и ответы
//https://progi.pro/sshpass-t10662

#КонецОбласти



#Область СсылкиМатематикаАлгебра

//Тригонометрические функции
//https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B8%D0%B3%D0%BE%D0%BD%D0%BE%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8

//Тригонометрическая таблица
//http://reshit.ru/trigonometricheskaya-tablitsa

//Тригонометрические тождества
//https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B8%D0%B3%D0%BE%D0%BD%D0%BE%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5_%D1%82%D0%BE%D0%B6%D0%B4%D0%B5%D1%81%D1%82%D0%B2%D0%B0

//Справочник
//На страницах нашего сайта собран основной теоретический материал по математике, 
//геометрии, физике и другим техническим предметам. У нас подробно разобраны основные формулы, 
//таблицы и теоремы из школьного и ВУЗовского курсов. Каждая теоретическая статья содержит 
//примеры решения задач по теме, чтобы вы сразу могли увидеть, 
//как применяется данный теоретический материал на практике!
//http://ru.solverbook.com/spravochnik/

//Производная функции: основные понятия и определения
//http://ru.solverbook.com/spravochnik/proizvodnye/

//Текстовые потоки и фильтры
//Обработка текста в командной строке с использованием текстовых утилит GNU
//https://www.ibm.com/developerworks/ru/library/l-lpic1-v3-103-2/index.html

//3 способа проверить, открыт ли порт на удаленной системе Linux
//https://itsecforu.ru/2019/03/18/%F0%9F%90%A7-3-%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%B0-%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%B8%D1%82%D1%8C-%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82-%D0%BB%D0%B8-%D0%BF%D0%BE%D1%80%D1%82-%D0%BD/

#КонецОбласти

//гугл онлайн диаграмма (блок схема)
//https://app.diagrams.net/

//6 сервисов для работы с блок-схемами
//https://proglib.io/p/6-diagram-services

//Подборка шпаргалок
//https://tproger.ru/digest/top-cheatsheets/

#КонецОбласти

///////////////////////////////////////////////////////////////////////  Postgre SQL   ////////////////////////////////////////////////////////////////////////////


#Область КомандыPostgres

&НаКлиенте
Процедура ПолучитьСписокБазPostgres(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьБазуPostgres(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьСерверPostgres(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСервераPostgres(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьСерверPostgres(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьСерверPostgres(Команда)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СписокБазPostgres(Команда)

	Если ТунельSSH Тогда   
		Если 	Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
			Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	Если ПарольСуперПользователя = "" Тогда   
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
		ПоказатьПредупреждение(Оповещение, "Не заполнено поле " + Символ(34) + "пароль супер пользователя" + Символ(34) + "!", 0, "Внимание!");
		Возврат;
	КонецЕсли;		

	ПолучитьИнформациюПоСпискуБазPostgres();

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюПоСпискуБазPostgres()

	ТекстКомандыДляВыполнения = ?(ТунельSSH, "sshpass -p '" + ПарольПользовательСервераЧерезSSH + "' ssh '" + 
		ПользовательСервераЧерезSSH + "'@'" + АдресСервераЧерезSSH + "' " + СкриптПолученияИнформацииПоСпискуБазPostgres() + " ", 
			СкриптПолученияИнформацииПоСпискуБазPostgres());

	СохранитьНаСерверИсходникСкрипта();
	ПолучениеДанныхССервераПослеОбработкиСкрипта(,, Истина);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВаринатВзаимодействияPostgreSQLПриИзменении(Элемент)
	
	Если ВаринатВзаимодействияPostgreSQL = "Перезагрузить сервер" Тогда
		Элементы.ГруппаАдминистраторСервераpostgres.Видимость = Истина;
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Истина;
			ИзменитьСодержаниеПодсказкиКоманды("Перезагрузить сервер Postgre SQL");
	Иначе 
			//Элементы.ВыполнитьСформированныйСкрипт.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СписокСправочники

#Область СправочникиНастройки1С

&НаКлиенте
Процедура ОткрытьСписокАдминистраторовСервера1С(Команда)
	ОткрытьФорму("Справочник.АдминистраторСервера1С.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокБаз1С(Команда)
	ОткрытьФорму("Справочник.База1С.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокСерверов1С(Команда)
	ОткрытьФорму("Справочник.База1С.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#Область СправочникиНастройкиPostgre

&НаКлиенте
Процедура ОткрытьСписокБазPostgre(Команда)
	ОткрытьФорму("Справочник.БазаPostgres.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СписокАдминистраторовPostgree(Команда)
	ОткрытьФорму("Справочник.АдминистраторСервераPostgreSQL.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура АдминистраторСервера1С5ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолучениеАдмина1СОбработкаВыбора(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ПолучениеАдмина1СОбработкаВыбора(ВыбрЗнач)
	 ПарольАдминистратораСервера1С = ВыбрЗнач.ПарольАдминистратора;
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторБазы1С1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолучениеАдминаБазы1СОбработкаВыбора(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ПолучениеАдминаБазы1СОбработкаВыбора(ВыбрЗнач)
	 ПарольАдминистратораБазы1С = ВыбрЗнач.ПарольПользователя;
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторСервера1С2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолучениеАдмина1СОбработкаВыбора(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторСервераPostgresОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолучениеАдминаСервераPostgre(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ПолучениеАдминаСервераPostgre(ВыбрЗнач)
	 ПарольАдминистраторСервераPostgres = ВыбрЗнач.ПарольАдминистратораPostgreSQL;
КонецПроцедуры

&НаКлиенте
Процедура ТекстПрямойКомандыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
		Если ТунельSSH Тогда   
			Если Не ЗначениеЗаполнено(АдресСервераЧерезSSH) Или Не ЗначениеЗаполнено(ПользовательСервераЧерезSSH) Или
				Не ЗначениеЗаполнено(ПарольПользовательСервераЧерезSSH) Тогда
					Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение", ЭтотОбъект);
						ПоказатьПредупреждение(Оповещение, "Не заполнены основные поля !", 0, "Внимание!");
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ВыполнитьСформированныйТекстКоманды();

КонецПроцедуры

//Базовые команды Linux для тестировщиков и не только
//https://habr.com/ru/post/481398/

//https://www.hostinger.ru/rukovodstva/osnovnyje-komandy-linux
//34 Команды Linux, Которые Должен Знать Каждый Пользователь

//https://losst.ru/42-komandy-linux-kotorye-vy-dolzhny-znat
//42 команды linux которые вы должны знать

//https://losst.ru/poleznye-komandy-linux
//полезные команды linux

//https://devacademy.ru/article/50-samyih-chasto-ispolzuemyih-komand-v-unixlinux-s-primerami
//50 самых часто используемых команд в UNIX/Linux с примерами

//https://white55.ru/cmdmain.html
//Перечень наиболее часто используемых команд Linux.


